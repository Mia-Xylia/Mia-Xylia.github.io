{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/03/27/computer-science/java/%E5%9F%BA%E7%A1%803/",
            "url": "http://example.com/2025/03/27/computer-science/java/%E5%9F%BA%E7%A1%803/",
            "title": "",
            "date_published": "2025-03-27T09:09:02.469Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2025/03/26/computer-science/java/%E5%9F%BA%E7%A1%801/",
            "url": "http://example.com/2025/03/26/computer-science/java/%E5%9F%BA%E7%A1%801/",
            "title": "笔记：java（0）",
            "date_published": "2025-03-25T16:00:00.000Z",
            "content_html": "<ul>\n<li>课程</li>\n</ul>\n<div class=\"links\"><div class=\"item\" title=\"韩顺平\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWZoNDExeTdSOC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTIxYTg4NDRlZGE0MTE4N2M2ZTIxYzhmYTdjNTNiZThl\" data-background-image=\"https://www.bilibili.com/favicon.ico\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWZoNDExeTdSOC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTIxYTg4NDRlZGE0MTE4N2M2ZTIxYzhmYTdjNTNiZThl\">韩顺平 零基础30天学会java</span>\n          <p class=\"desc\">java基础</p>\n          </div></div></div>\n<h1 id=\"课程内容介绍\"><a class=\"markdownIt-Anchor\" href=\"#课程内容介绍\">#</a> 课程内容介绍</h1>\n<ul>\n<li>\n<p>java 后端技术体系  HSP8<br>\n 第一部分：java 基础<br>\n第二部分：java 高级<br>\n第三部分：javaWEB<br>\n 第四部分：主流框架和项目管理<br>\n第五部分：分布式，微服务，并行架构<br>\n第六部分：DevOps（开发运维一体化）   自动化部分管理项目，解决 CI/CD<br>\n 第七部分：大数据技术（可以弱化）<br>\n第八部分：项目<br>\n第九部分：大厂的高频面试题<br>\n第十部分：底层源码 / 内核研究<br>\n编程基础的扩展（科班）</p>\n</li>\n<li>\n<p>java 就业方向<br>\n javaEE 软件工程师 ： 电商，团购，众筹，sns，教育，金融，搜索<br>\n大数据软件工程师：大数据应用工程师，大数据算法工程师，大数据分析和挖掘工程师<br>\n Android 工程师</p>\n</li>\n<li>\n<p>开发场景<br>\n SSM<br>\nAndroid 开发<br>\n hadoop</p>\n</li>\n<li>\n<p>应用领域<br>\n企业级应用<br>\n Android 平台应用<br>\n移动领域应用</p>\n</li>\n<li>\n<p>内容梳理<br>\n笔记，代码，课件，软件，视频，资料</p>\n</li>\n<li>\n<p>程序举例<br>\n程序：计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">Test&#123;</span></span><br><span class=\"line\">    <span class=\"string\">public</span> <span class=\"string\">static</span> <span class=\"string\">void</span> <span class=\"string\">main(String[]</span> <span class=\"string\">args)&#123;</span></span><br><span class=\"line\">        <span class=\"string\">int</span> <span class=\"string\">rest</span> <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">+1;</span></span><br><span class=\"line\">        <span class=\"string\">//</span> <span class=\"string\">显示</span></span><br><span class=\"line\">        <span class=\"string\">System.out.println(&quot;结果=&quot;</span> <span class=\"string\">+</span> <span class=\"string\">res);</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>java 故事<br>\n 1995 年第一版<br>\n 8**，11  LTS<br>\njava se 标准版，java EE 企业版，java me 小型版</p>\n</li>\n<li>\n<p>java 特性<br>\n 1.oop<br>\n2. 健壮的（强类型机制，异常处理，垃圾的自动收集等）<br>\n3. 跨平台     .java --&gt; .class --&gt; Windows/Linux/Mac<br>\n4. 解释型语言：编译后不能直接运行<br>\n编译型语言：c/c++</p>\n</li>\n<li>\n<p>编译工具的介绍<br>\n editplus<br>\nnotepad++<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==\">Subline Text</span><br>\nIDEA<br>\neclipse</p>\n</li>\n<li>\n<p>java-jdk 介绍<br>\n JVM（java 虚拟机）实现了跨平台，包含在 jdk 中</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">    A[.java] -- 编译(javac) --&gt; B[.class]</span><br><span class=\"line\">    B[.class] -- 运行(java) --&gt; C[Windows/Linux/Mac]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>JDK = JRE + java 的开发工具 [java,javac,javadoc,javap 等]<br>\n JRE = JVM + java 核心类库</p>\n<h1 id=\"jdk的安装和配置\"><a class=\"markdownIt-Anchor\" href=\"#jdk的安装和配置\">#</a> jdk 的安装和配置</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvP2VyPTIyMTg4NiNqYXZhMTctd2luZG93cw==\">jdk 安装地址</span></p>\n<ul>\n<li>配置环境变量<br>\n jdk 安装地址 /bin javac</li>\n</ul>\n<p>我的电脑–属性–高级系统设置–环境变量</p>\n<ul>\n<li>JAVA_HOME 环境变量</li>\n<li>path 中 % JAVA_HOME%\\bin</li>\n</ul>\n<ul>\n<li>US 区别<br>\n环境变量和用户变量</li>\n</ul>\n<h1 id=\"入门\"><a class=\"markdownIt-Anchor\" href=\"#入门\">#</a> 入门</h1>\n<ul>\n<li>快速入门<br>\n文件名与类名相同<br>\n文件 – 设置文件编码 – GBK</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```base</span></span><br><span class=\"line\"><span class=\"string\">//这是java的快速入门，演示java的开发步骤</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">Hello表示hello是一个类，是一个public公有的类</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">hello&#123;&#125;表示一个类的开始和结束</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">main&#123;&#125;表示方法的开始和结束</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">;表示语句结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">Hello&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">//编写一个main方法，程序的入口</span></span><br><span class=\"line\">\t<span class=\"string\">public</span> <span class=\"string\">static</span> <span class=\"string\">void</span> <span class=\"string\">main(String[]</span> <span class=\"string\">args)&#123;</span></span><br><span class=\"line\">\t<span class=\"string\">//</span> <span class=\"string\">输出hello</span> <span class=\"string\">world到屏幕</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;hello,world~&quot;);</span></span><br><span class=\"line\">\t<span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -encoding UTF-8 Hello.java</span><br><span class=\"line\">java Hello</span><br></pre></td></tr></table></figure>\n<ul>\n<li>练习题</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">Hello&#123;</span></span><br><span class=\"line\">\t<span class=\"string\">public</span> <span class=\"string\">static</span> <span class=\"string\">void</span> <span class=\"string\">main(String[]</span> <span class=\"string\">args)&#123;</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;小明</span> <span class=\"string\">is</span> <span class=\"string\">studying</span> <span class=\"string\">java！&quot;);</span></span><br><span class=\"line\">\t<span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>java 流程分析<br>\n.java 源文件<br>\n.class 字节文件</p>\n</li>\n<li>\n<p>开发细节<br>\n 1.java 源文件是以.java 为扩展名的。源文件的基本组成部分是.class 文件<br>\n 2.java 区分大小写<br>\n 3. 以；结尾<br>\n 4.main 方法有固定书写格式：public static void main (String [] args)<br>\n 5. 一个源文件最多只能有一个 public 类，其他类的个数不限制，每一个类对应一个.class 文件<br>\n 6. 大括号成对出现<br>\n 7.public 类的类名 = 文件名<br>\n 8. 一个源文件中最多只有一个 public 类。其他类的个数不限，也可以将 main 方法写在非 public 类中，指定运行非 public 类，入口方法就是非 public 类的 main 方法</p>\n</li>\n<li>\n<p>学习方法<br>\n明确需求 --&gt; 能否使用传统技术解决 --&gt; 学习的新技术和知识点<br>\n |<br>\n 研究细节和使用规范  &lt;-- 快速入门案例 &lt;-- 学习新技术的基本原理和基本语法</p>\n</li>\n</ul>\n<h1 id=\"转义字符\"><a class=\"markdownIt-Anchor\" href=\"#转义字符\">#</a> 转义字符</h1>\n<p>\\t 制表符<br>\n \\n 换行符<br>\n \\   &quot;  ' 转义符<br>\n \\r 一个回车</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">ChangeChar&#123;</span></span><br><span class=\"line\">\t<span class=\"string\">public</span> <span class=\"string\">static</span> <span class=\"string\">void</span> <span class=\"string\">main(String[]</span> <span class=\"string\">args)&#123;</span></span><br><span class=\"line\">\t\t<span class=\"string\">//</span> <span class=\"string\">\\t制表位</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;北京\\t天津\\t上海\\t&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"string\">//</span> <span class=\"string\">\\n换行符</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;红楼梦\\n林黛玉\\n&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"string\">//</span> <span class=\"string\">\\\\</span> <span class=\"string\">:一个\\</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"string\">//</span> <span class=\"string\">\\&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;老韩说：\\&quot;要好好学习java\\&quot;&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;老韩说：\\&#x27;要好好学习java\\&#x27;&quot;);</span></span><br><span class=\"line\">\t\t<span class=\"string\">//</span> <span class=\"string\">\\</span> <span class=\"string\">r</span> <span class=\"string\">回车</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;韩顺平教育\\r北京&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>课后练习</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">public</span> <span class=\"string\">class</span> <span class=\"string\">ChangeChar1&#123;</span></span><br><span class=\"line\">\t<span class=\"string\">public</span> <span class=\"string\">static</span> <span class=\"string\">void</span> <span class=\"string\">main(String[]</span> <span class=\"string\">args)&#123;</span></span><br><span class=\"line\">\t\t<span class=\"string\">System.out.println(&quot;书名\\t作者\\t价格\\t销量\\n三国\\t罗贯中\\t120\\t1000&quot;);</span></span><br><span class=\"line\">\t<span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"注释-comment\"><a class=\"markdownIt-Anchor\" href=\"#注释-comment\">#</a> 注释 comment</h1>\n<ul>\n<li>\n<p>单行注释<br>\n // 注释文字</p>\n</li>\n<li>\n<p>多行注释<br>\n /<em> 注释文字</em> /</p>\n</li>\n<li>\n<p>文档注释<br>\n javadoc -d 文件夹名 -xx -yy Demo3.java</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">*@author    xxx</span><br><span class=\"line\">*@version   yyy</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>javadoc -d 文件夹路径 -author -version CommentTest.java<br>\n<img data-src=\"https://cdn.jsdelivr.net/gh/Mia-Xylia/Mia-Xylia-pictures@master/img/ac0fd5161da54b83a5c85493e9f0a5af.png\" alt=\"javadoc标签\"></p>\n<h1 id=\"java代码基础规范\"><a class=\"markdownIt-Anchor\" href=\"#java代码基础规范\">#</a> java 代码基础规范</h1>\n<p>1. 类，方法的注释要用 javadoc 方式<br>\n 2. 多行 / 单行 给代码维护者看<br>\n 3. 运算符和 = 两边加空格<br>\n 4. 源文件使用 utf-8<br>\n5. 行宽不超过 80<br>\n6. 代码编写风格 次行风格和行尾风格</p>\n<h1 id=\"dos命令\"><a class=\"markdownIt-Anchor\" href=\"#dos命令\">#</a> DOS 命令</h1>\n<ul>\n<li>DOC（磁盘操作系统）基本原理:</li>\n</ul>\n<p>指令 --&gt; 接受指令，解析指令，执行指令<br>\n dos 系统</p>\n<ul>\n<li>\n<p>路径<br>\n相对路径：从当前目录开始定位，形成的路径<br>\n绝对路径：从根目录 / 顶级目录开始定位，形成的路径</p>\n</li>\n<li>\n<p>常用的 doc 命令<br>\n <code>dir</code>  | 查看当前目录下的内容<br>\n <code>cd</code>  | 切换到另外一个地址<br>\n <code>help</code>  | 查看使用方式<br>\n <code>cd../</code> | 切换到上级目录<br>\n <code>cd\\</code> | 切换到根目录<br>\n <code>tree</code>  | 查看目录树<br>\n <code>cls</code>  | 清屏<br>\n <code>exit</code>  | 退出<br>\n <code>quit</code>  | 退出</p>\n</li>\n<li>\n<p>其他 doc 命令<br>\n <code>md</code>  | 创建目录<br>\n <code>rd</code>  | 删除目录<br>\n <code>copy</code>  | 拷贝文件<br>\n <code>del</code>  | 删除文件<br>\n <code>echo</code>  | 创建文件<br>\n <code>type</code>  | 显示文本内容<br>\n <code>move</code>  | 移动</p>\n</li>\n</ul>\n<h1 id=\"本章作业\"><a class=\"markdownIt-Anchor\" href=\"#本章作业\">#</a> 本章作业</h1>\n<ul>\n<li>Homework01<br>\nhello world 程序</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Homework01&#123;</span><br><span class=\"line\">  public static void main(String[] args)&#123;</span><br><span class=\"line\">    System.out.println(&quot;hello world&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Homework02<br>\n 将个人的基本信息（姓名，性别，籍贯，住址）打印到控制台输出，各信息分别占一行</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Homework02&#123;</span><br><span class=\"line\">  public static void main(String[] args)&#123;</span><br><span class=\"line\">    System.out.println(&quot;姓名\\t性别\\t籍贯\\t住址\\n小二\\t男\\t山西\\t山东&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Homework03<br>\nJDK,JRE,JVM 的关系</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JDK包含JRE，JRE包含JVM</span><br><span class=\"line\">// JDK = JRE + java开发工具</span><br><span class=\"line\">// JRE = JVM + 核心类库</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Homework04<br>\n 环境变量 path 配置及作用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 高级环境变量 -- 环境变量 -- path（u）</span><br><span class=\"line\">// 能够在整个用户系统中使用java的命令</span><br><span class=\"line\"></span><br><span class=\"line\">//为了在doc任意目录，使用java和javac命令</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Homework05<br>\njava 编写步骤</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个public类，定义一个主方法，编写功能;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Homework06<br>\nJava 编写规范</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*类和方法注释用文档注释，维护人员看的是单行注释和多行注释</span><br><span class=\"line\">  运算符和=两边都加空格</span><br><span class=\"line\">  源文件用utf-8</span><br><span class=\"line\">  风格</span><br><span class=\"line\">*/ </span><br></pre></td></tr></table></figure>\n<ul>\n<li>Homework07<br>\njava 初学者容易犯的错误</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*文件名和类名不一致</span><br><span class=\"line\">  书写错误</span><br><span class=\"line\">  英文和中文的；*/</span><br></pre></td></tr></table></figure>",
            "tags": [
                "java基础",
                "笔记"
            ]
        },
        {
            "id": "http://example.com/2025/03/26/computer-science/java/%E5%9F%BA%E7%A1%802/",
            "url": "http://example.com/2025/03/26/computer-science/java/%E5%9F%BA%E7%A1%802/",
            "title": "笔记：java（1）",
            "date_published": "2025-03-25T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "java基础",
                "笔记"
            ]
        },
        {
            "id": "http://example.com/2025/03/26/computer-science/python/pytorch2/",
            "url": "http://example.com/2025/03/26/computer-science/python/pytorch2/",
            "title": "笔记：PyTorch(2)",
            "date_published": "2025-03-25T16:00:00.000Z",
            "content_html": "<h1 id=\"神经网络\"><a class=\"markdownIt-Anchor\" href=\"#神经网络\">#</a> 神经网络</h1>\n<h2 id=\"神经网络的基本骨架-nnmodule\"><a class=\"markdownIt-Anchor\" href=\"#神经网络的基本骨架-nnmodule\">#</a> 神经网络的基本骨架  nn.Module</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">sympy</span> <span class=\"string\">import</span> <span class=\"string\">xring</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super().__init__()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">input):</span></span><br><span class=\"line\">        <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">input+1</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">output</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">xylia</span>  <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor(1.0)</span></span><br><span class=\"line\"><span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">xylia(x)</span></span><br><span class=\"line\"><span class=\"string\">print(output)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"卷积层-convolution-layers\"><a class=\"markdownIt-Anchor\" href=\"#卷积层-convolution-layers\">#</a> 卷积层  Convolution Layers</h2>\n<ul>\n<li>nn.Conv2d<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZkdW1vdWxpbi9jb252X2FyaXRobWV0aWMvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k\">link</span></li>\n</ul>\n<details class=\"success\"><summary>部分官方文档</summary><div>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode=&#x27;zeros&#x27;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in_channels (int) – Number of channels in the input image</span><br><span class=\"line\"></span><br><span class=\"line\">out_channels (int) – Number of channels produced by the convolution</span><br><span class=\"line\"></span><br><span class=\"line\">kernel_size (int or tuple) – Size of the convolving kernel</span><br><span class=\"line\"></span><br><span class=\"line\">stride (int or tuple, optional) – Stride of the convolution. Default: 1</span><br><span class=\"line\"></span><br><span class=\"line\">padding (int or tuple, optional) – Zero-padding added to both sides of the input. Default: 0</span><br><span class=\"line\"></span><br><span class=\"line\">padding_mode (string, optional) – &#x27;zeros&#x27;, &#x27;reflect&#x27;, &#x27;replicate&#x27; or &#x27;circular&#x27;. Default: &#x27;zeros&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">dilation (int or tuple, optional) – Spacing between kernel elements. Default: 1</span><br><span class=\"line\"></span><br><span class=\"line\">groups (int, optional) – Number of blocked connections from input channels to output channels. Default: 1</span><br><span class=\"line\"></span><br><span class=\"line\">bias (bool, optional) – If True, adds a learnable bias to the output. Default: True</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details>\n<p>Out_channel = 2 生成两个卷积核</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">nn_module</span> <span class=\"string\">import</span> <span class=\"string\">output</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">test_tb</span> <span class=\"string\">import</span> <span class=\"string\">writer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataset</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(&quot;./data&quot;,train=False,transform=torchvision.transforms.ToTensor(),</span></span><br><span class=\"line\">                                       <span class=\"string\">download=True)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(dataset,batch_size</span> <span class=\"string\">=</span> <span class=\"number\">64</span><span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.conv1</span> <span class=\"string\">=</span> <span class=\"string\">nn.Conv2d(in_channels=3,</span> <span class=\"string\">out_channels=6,</span> <span class=\"string\">kernel_size=3,stride=1,padding=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.conv1(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"comment\"># print(xylia)</span></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;./log&quot;)</span></span><br><span class=\"line\"><span class=\"string\">step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">for data in dataloader:</span></span><br><span class=\"line\">    <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">    <span class=\"string\">print(imgs.shape)</span></span><br><span class=\"line\">    <span class=\"string\">print(output.shape)</span></span><br><span class=\"line\">    <span class=\"comment\"># torch.Size([64, 3, 32, 32])</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_images(&quot;input&quot;,imgs,step)</span></span><br><span class=\"line\">    <span class=\"comment\"># torch.Size([64, 6, 30, 30])</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(output,(-1,3,30,30))</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_images(&quot;output&quot;,output,step)</span></span><br><span class=\"line\">    <span class=\"string\">step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"池化层-pooling-layers\"><a class=\"markdownIt-Anchor\" href=\"#池化层-pooling-layers\">#</a> 池化层  Pooling layers</h2>\n<ul>\n<li>nn.MaxPool2d</li>\n</ul>\n<details class=\"success\"><summary>部分官方文档</summary><div>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kernel_size – the size of the window to take a max over</span><br><span class=\"line\"></span><br><span class=\"line\">stride – the stride of the window. Default value is kernel_size</span><br><span class=\"line\"></span><br><span class=\"line\">padding – implicit zero padding to be added on both sides</span><br><span class=\"line\"></span><br><span class=\"line\">dilation – a parameter that controls the stride of elements in the window</span><br><span class=\"line\"></span><br><span class=\"line\">return_indices – if True, will return the max indices along with the outputs. Useful for torch.nn.MaxUnpool2d later</span><br><span class=\"line\"></span><br><span class=\"line\">ceil_mode – when True, will use ceil instead of floor to compute the output shape</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details>\n<p>dilation 空洞卷积，卷积核每两个数空一格<br>\n kernel_size = 3<br>\n 输入图像：5×5<br>\n 池化核 3×3<br>\nCeil_model = True   进行保留</p>\n<p>最大池化的作用：保留数据特征，数据量减少</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataset</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(&quot;./data&quot;,</span> <span class=\"string\">train=True,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                       <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(dataset,</span> <span class=\"string\">batch_size=64)</span></span><br><span class=\"line\"><span class=\"comment\"># # 输入数据</span></span><br><span class=\"line\"><span class=\"comment\"># input = torch.tensor([[1,2,0,3,1],</span></span><br><span class=\"line\"><span class=\"comment\">#                       [0,1,2,3,1],</span></span><br><span class=\"line\"><span class=\"comment\">#                       [1,2,1,0,0],</span></span><br><span class=\"line\"><span class=\"comment\">#                       [5,2,3,1,1],</span></span><br><span class=\"line\"><span class=\"comment\">#                       [2,1,0,1,1]],dtype=torch.float32)# 二维矩阵</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># input = torch.reshape(input,(-1,1,5,5))</span></span><br><span class=\"line\"><span class=\"comment\"># print(input.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.maxpool1</span> <span class=\"string\">=</span> <span class=\"string\">nn.MaxPool2d(kernel_size=3,</span> <span class=\"string\">ceil_mode=False)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">input):</span></span><br><span class=\"line\">        <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">self.maxpool1(input)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">output</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"comment\"># output = xylia(input)</span></span><br><span class=\"line\"><span class=\"comment\"># print(output)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;./logs_maxpoll&quot;)</span></span><br><span class=\"line\"><span class=\"string\">step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">for data in dataloader:</span></span><br><span class=\"line\">    <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_images(&quot;input&quot;,</span> <span class=\"string\">imgs,</span> <span class=\"string\">step)</span></span><br><span class=\"line\">    <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_images(&quot;output&quot;,</span> <span class=\"string\">output,</span> <span class=\"string\">step)</span></span><br><span class=\"line\">    <span class=\"string\">step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"padding-layers\"><a class=\"markdownIt-Anchor\" href=\"#padding-layers\">#</a> Padding Layers</h2>\n<ul>\n<li>nn.ZeroPad2d<br>\n 用 0 填充</li>\n<li>nn.ConstatPad2d<br>\n 用常数填充</li>\n</ul>\n<h2 id=\"非线性激活-no-linear-activations\"><a class=\"markdownIt-Anchor\" href=\"#非线性激活-no-linear-activations\">#</a> 非线性激活  No-linear Activations</h2>\n<ul>\n<li>nn.Relu  截断<br>\n input&gt;0 output = input<br>\ninput&lt;0 output = 0</li>\n</ul>\n<details class=\"success\"><summary>inplace</summary><div>\n<p>input = -1<br>\nPelu(input,inplace = True)<br>\ninput =0</p>\n<p>input = -1<br>\nPelu(input,inplace = False)<br>\ninput =-1<br>\noutput = 0</p>\n</div></details>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span>  <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([[1,-0.5],</span></span><br><span class=\"line\">                     [<span class=\"number\">-1</span>,<span class=\"number\">3</span>]<span class=\"string\">])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(input,(-1,1,2,2))</span></span><br><span class=\"line\"><span class=\"string\">print(input.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.relu1</span> <span class=\"string\">=</span> <span class=\"string\">nn.ReLU()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">input):</span></span><br><span class=\"line\">        <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">self.relu1(input)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">output</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">xylia(input)</span></span><br><span class=\"line\"><span class=\"string\">print(output)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>nn.Sigmoid</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span>  <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">nn_conv2</span> <span class=\"string\">import</span> <span class=\"string\">dataloader</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([[1,-0.5],</span></span><br><span class=\"line\">                     [<span class=\"number\">-1</span>,<span class=\"number\">3</span>]<span class=\"string\">])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(input,(-1,1,2,2))</span></span><br><span class=\"line\"><span class=\"string\">print(input.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataset</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(&quot;./data&quot;,</span> <span class=\"string\">train=True,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                       <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(dataset,batch_size=64)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.relu1</span> <span class=\"string\">=</span> <span class=\"string\">nn.ReLU()</span></span><br><span class=\"line\">        <span class=\"string\">self.sigmoid1</span> <span class=\"string\">=</span> <span class=\"string\">nn.Sigmoid()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">input):</span></span><br><span class=\"line\">        <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">self.sigmoid1(input)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">output</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"comment\"># output = xylia(input)</span></span><br><span class=\"line\"><span class=\"comment\"># print(output)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;./logs_sigmoid1&quot;)</span></span><br><span class=\"line\"><span class=\"string\">step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">for data in dataloader:</span></span><br><span class=\"line\">    <span class=\"string\">imgs,</span> <span class=\"string\">targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_images(&quot;input&quot;,</span> <span class=\"string\">imgs,</span> <span class=\"string\">global_step=step)</span></span><br><span class=\"line\">    <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_images(&quot;output&quot;,</span> <span class=\"string\">outputs,</span> <span class=\"string\">global_step=step)</span></span><br><span class=\"line\">    <span class=\"string\">step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"线性层及其他层介绍\"><a class=\"markdownIt-Anchor\" href=\"#线性层及其他层介绍\">#</a> 线性层及其他层介绍</h2>\n<ul>\n<li>Normalization Layer</li>\n<li>Recurrent Layers</li>\n<li>Transformer Layers</li>\n<li>Dropout Layers<br>\nnn.Dropout 防止过拟合</li>\n<li>Sparse Layers<br>\nnn.Embedding 自然语言</li>\n<li>Distance Functions</li>\n<li>Loss Functions</li>\n<li>Sequential</li>\n</ul>\n<h3 id=\"linaear-layers\"><a class=\"markdownIt-Anchor\" href=\"#linaear-layers\">#</a> Linaear Layers</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataset</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(&quot;./data&quot;,</span> <span class=\"string\">train=False,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                       <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数据集batch之后生下了16张图片，舍弃最后不满足的drop_last=True</span></span><br><span class=\"line\"><span class=\"string\">dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(dataset,</span> <span class=\"string\">batch_size=64,drop_last=True)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.Linear1</span> <span class=\"string\">=</span> <span class=\"string\">nn.Linear(196608,10)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,input):</span></span><br><span class=\"line\">        <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">self.Linear1(input)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">output</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">for data in dataloader:</span></span><br><span class=\"line\">    <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"string\">print(imgs.shape)</span></span><br><span class=\"line\">    <span class=\"comment\"># output = torch.reshape(imgs,(1,1,1,-1))</span></span><br><span class=\"line\">    <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">torch.flatten(imgs)</span></span><br><span class=\"line\">    <span class=\"string\">print(output.shape)</span></span><br><span class=\"line\">    <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">xylia(output)</span></span><br><span class=\"line\">    <span class=\"string\">print(output.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"搭建小实战和sequential的使用\"><a class=\"markdownIt-Anchor\" href=\"#搭建小实战和sequential的使用\">#</a> 搭建小实战和 Sequential 的使用</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.nn</span> <span class=\"string\">import</span> <span class=\"string\">Conv2d,MaxPool2d,Flatten,Linear</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.conv1</span> <span class=\"string\">=</span> <span class=\"string\">Conv2d(3,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2,stride=1)</span></span><br><span class=\"line\">        <span class=\"string\">self.maxpool1</span> <span class=\"string\">=</span> <span class=\"string\">MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"string\">self.conv2</span> <span class=\"string\">=</span> <span class=\"string\">Conv2d(32,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2,stride=1)</span></span><br><span class=\"line\">        <span class=\"string\">self.maxpool2</span> <span class=\"string\">=</span> <span class=\"string\">MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"string\">self.conv3</span> <span class=\"string\">=</span> <span class=\"string\">Conv2d(32,</span> <span class=\"number\">64</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2,stride=1)</span></span><br><span class=\"line\">        <span class=\"string\">self.maxpool3</span> <span class=\"string\">=</span> <span class=\"string\">MaxPool2d(2)</span></span><br><span class=\"line\">        <span class=\"string\">self.flatten</span> <span class=\"string\">=</span> <span class=\"string\">Flatten()</span></span><br><span class=\"line\">        <span class=\"string\">self.linear</span> <span class=\"string\">=</span> <span class=\"string\">Linear(1024,</span> <span class=\"number\">64</span><span class=\"string\">)</span></span><br><span class=\"line\">        <span class=\"string\">self.linear2</span> <span class=\"string\">=</span> <span class=\"string\">Linear(64,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.conv1(x)</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.maxpool1(x)</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.conv2(x)</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.maxpool2(x)</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.conv3(x)</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.maxpool3(x)</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.flatten(x)</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.linear(x)</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.linear2(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"string\">print(xylia)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>检验是否正确</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.ones((64,3,32,32))</span></span><br><span class=\"line\"><span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">xylia(input)</span></span><br><span class=\"line\"><span class=\"string\">print(output.shape)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Sequential 的作用</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">self.model</span> <span class=\"string\">=</span> <span class=\"string\">nn.Sequential(</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(3,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2,stride=1),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(32,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2,stride=1),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(32,</span> <span class=\"number\">64</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2,stride=1),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Flatten(),</span></span><br><span class=\"line\">            <span class=\"string\">Linear(1024,</span> <span class=\"number\">64</span><span class=\"string\">),</span></span><br><span class=\"line\">            <span class=\"string\">Linear(64,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\">        <span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.model(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>writer 方式</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;./logs_seq&quot;)</span></span><br><span class=\"line\"><span class=\"string\">writer.add_graph(xylia,</span> <span class=\"string\">input)</span></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"土堆说卷积操作选看\"><a class=\"markdownIt-Anchor\" href=\"#土堆说卷积操作选看\">#</a> 土堆说卷积操作 (选看)</h1>\n<ul>\n<li>conv2D<br>\nstride = 1 时走一步</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch.nn.functional</span> <span class=\"string\">as</span> <span class=\"string\">F</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入数据</span></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([[1,2,0,3,1],</span></span><br><span class=\"line\">                      [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]<span class=\"string\">,</span></span><br><span class=\"line\">                      [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]<span class=\"string\">,</span></span><br><span class=\"line\">                      [<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]<span class=\"string\">,</span></span><br><span class=\"line\">                      [<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]<span class=\"string\">])#</span> <span class=\"string\">二维矩阵</span></span><br><span class=\"line\"><span class=\"comment\"># 卷积核</span></span><br><span class=\"line\"><span class=\"string\">kernel</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([[1,2,1],</span></span><br><span class=\"line\">                       [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]<span class=\"string\">,</span></span><br><span class=\"line\">                       [<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]<span class=\"string\">])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 尺寸变换</span></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(input,(1,1,5,5))</span></span><br><span class=\"line\"><span class=\"string\">kernel</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(kernel,(1,1,3,3))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(input.shape)</span></span><br><span class=\"line\"><span class=\"comment\"># print(kernel.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">F.conv2d(input,kernel,stride=1)</span></span><br><span class=\"line\"><span class=\"string\">print(output)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">output2</span> <span class=\"string\">=</span> <span class=\"string\">F.conv2d(input,kernel,stride=2)</span></span><br><span class=\"line\"><span class=\"string\">print(output2)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>padding<br>\npadding = 1, 向外拓展一行 / 列</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">output3</span> <span class=\"string\">=</span> <span class=\"string\">F.conv2d(input,kernel,stride=1,padding=1)</span></span><br><span class=\"line\"><span class=\"string\">print(output3)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "pytorch基础"
            ]
        },
        {
            "id": "http://example.com/2025/03/26/computer-science/python/pytorch3/",
            "url": "http://example.com/2025/03/26/computer-science/python/pytorch3/",
            "title": "笔记：PyTorch(3)",
            "date_published": "2025-03-25T16:00:00.000Z",
            "content_html": "<h1 id=\"loss-functions\"><a class=\"markdownIt-Anchor\" href=\"#loss-functions\">#</a> Loss Functions</h1>\n<ul>\n<li>\n<p>Loss<br>\ntarget = 1,2,5<br>\noutput = 1,2,3<br>\nLoss = target - output<br>\n1. 计算实际输出和目标之间的差距<br>\n 2. 为我们更新输出提供一定的依据（反向传播）</p>\n</li>\n<li>\n<p>L1loss<br>\nL1loss = (0+0+2^2)/3</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span> <span class=\"string\">L1loss</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.nn</span> <span class=\"string\">import</span> <span class=\"string\">L1Loss</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([1,2,3],dtype=torch.float32)</span></span><br><span class=\"line\"><span class=\"string\">target</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([1,2,5])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">input</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(input,</span> <span class=\"string\">(1,1,1,3))</span></span><br><span class=\"line\"><span class=\"string\">target</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(target,</span> <span class=\"string\">(1,1,1,3))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">L1Loss(reduction=&#x27;sum&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">result</span> <span class=\"string\">=</span> <span class=\"string\">loss(input,</span> <span class=\"string\">target)</span></span><br><span class=\"line\"><span class=\"string\">print(result)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>MSELoss<br>\nMSELoss = (0+0+2)/3</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span> <span class=\"string\">mes</span></span><br><span class=\"line\"><span class=\"string\">loss_mae</span> <span class=\"string\">=</span> <span class=\"string\">nn.MSELoss()</span></span><br><span class=\"line\"><span class=\"string\">result_mse</span> <span class=\"string\">=</span> <span class=\"string\">loss_mae(input,</span> <span class=\"string\">target)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">print(result_mse)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>CrossEntropyLoss</li>\n</ul>\n<p>person,dog,cat[0,1,2]<br>\ninput = img[dog]<br>\nnn :<br>\noutput = [0.1,0.2,0.3]      x<br>\ntarget = [1]    class<br>\nloss(x,class) = -0.2 +ln(exp(0.1)+exp(0.2),exp(0.3))</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span>  <span class=\"string\">验证</span></span><br><span class=\"line\"><span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([0.1,0.2,0.3])</span></span><br><span class=\"line\"><span class=\"string\">y</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([1])</span></span><br><span class=\"line\"><span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(x,</span> <span class=\"string\">(1,3))</span></span><br><span class=\"line\"><span class=\"string\">loss_cross</span> <span class=\"string\">=</span> <span class=\"string\">nn.CrossEntropyLoss()</span></span><br><span class=\"line\"><span class=\"string\">result_cross</span> <span class=\"string\">=</span> <span class=\"string\">loss_cross(x,y)</span></span><br><span class=\"line\"><span class=\"string\">print(result_cross)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span> <span class=\"string\">CrossEntropyLoss+网络</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.nn</span> <span class=\"string\">import</span> <span class=\"string\">Conv2d,MaxPool2d,Flatten,Linear</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataset</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(&quot;./data&quot;,</span> <span class=\"string\">train=False,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                       <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(dataset,</span> <span class=\"string\">batch_size=1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.model</span> <span class=\"string\">=</span> <span class=\"string\">nn.Sequential(</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(3,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(32,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(32,</span> <span class=\"number\">64</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Flatten(),</span></span><br><span class=\"line\">            <span class=\"string\">Linear(1024,</span> <span class=\"number\">64</span><span class=\"string\">),</span></span><br><span class=\"line\">            <span class=\"string\">Linear(64,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\">        <span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.model(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">nn.CrossEntropyLoss()</span></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"attr\">for data in dataloader:</span></span><br><span class=\"line\">    <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">    <span class=\"comment\"># print(outputs)</span></span><br><span class=\"line\">    <span class=\"comment\"># print(targets)</span></span><br><span class=\"line\">    <span class=\"string\">cross_loss</span> <span class=\"string\">=</span> <span class=\"string\">loss(outputs,targets)</span></span><br><span class=\"line\">    <span class=\"string\">print(cross_loss)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"优化器\"><a class=\"markdownIt-Anchor\" href=\"#优化器\">#</a> 优化器</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRvcmNoLm9yZy9kb2NzLzEuOC4xL29wdGltLmh0bWw=\">torch.optim</span><br>\nLr = learning rate</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.nn</span> <span class=\"string\">import</span> <span class=\"string\">Conv2d,MaxPool2d,Flatten,Linear</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataset</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(&quot;./data&quot;,</span> <span class=\"string\">train=False,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                       <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(dataset,</span> <span class=\"string\">batch_size=1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.model</span> <span class=\"string\">=</span> <span class=\"string\">nn.Sequential(</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(3,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(32,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Conv2d(32,</span> <span class=\"number\">64</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">MaxPool2d(2),</span></span><br><span class=\"line\">            <span class=\"string\">Flatten(),</span></span><br><span class=\"line\">            <span class=\"string\">Linear(1024,</span> <span class=\"number\">64</span><span class=\"string\">),</span></span><br><span class=\"line\">            <span class=\"string\">Linear(64,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\">        <span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.model(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">nn.CrossEntropyLoss()</span></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"comment\"># 定义优化器</span></span><br><span class=\"line\"><span class=\"string\">optimizer</span> <span class=\"string\">=</span> <span class=\"string\">torch.optim.SGD(xylia.parameters(),</span> <span class=\"string\">lr=0.01)</span></span><br><span class=\"line\"><span class=\"comment\"># 运行20轮</span></span><br><span class=\"line\"><span class=\"attr\">for epoch in range(20):</span></span><br><span class=\"line\">    <span class=\"string\">runing_loss</span> <span class=\"string\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"attr\">for data in dataloader:</span></span><br><span class=\"line\">        <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">        <span class=\"string\">result_loss</span> <span class=\"string\">=</span> <span class=\"string\">loss(outputs,targets)</span></span><br><span class=\"line\">        <span class=\"comment\"># 将优化器中对应的每一个参数清零</span></span><br><span class=\"line\">        <span class=\"string\">optimizer.zero_grad()</span></span><br><span class=\"line\">        <span class=\"comment\"># 反向传播求出每个节点的梯度</span></span><br><span class=\"line\">        <span class=\"string\">result_loss.backward()</span></span><br><span class=\"line\">        <span class=\"string\">optimizer.step()</span></span><br><span class=\"line\">        <span class=\"comment\"># print(result_loss)</span></span><br><span class=\"line\">        <span class=\"string\">runing_loss</span> <span class=\"string\">+=</span> <span class=\"string\">result_loss</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">print(runing_loss)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"网络模型\"><a class=\"markdownIt-Anchor\" href=\"#网络模型\">#</a> 网络模型</h1>\n<h2 id=\"现有网络模型的使用及修改\"><a class=\"markdownIt-Anchor\" href=\"#现有网络模型的使用及修改\">#</a> 现有网络模型的使用及修改</h2>\n<details class=\"success\"><summary>数据集</summary><div>\n<p>;;;<br>\n<span class=\"label success\">success</span></p>\n<div class=\"links\"><div class=\"item\" title=\"VGG16\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWVVaDl4S0F4U1RRUWkwWHlEQ1p6UHc/cHdkPXA3anc=\" data-background-image=\"https://img.88icon.com/download/jpg/201912/20212877d98b95ae7730decb11762bac.jpg!bg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWVVaDl4S0F4U1RRUWkwWHlEQ1p6UHc/cHdkPXA3anc=\">VGG16</span>\n          <p class=\"desc\">密码p7jw</p>\n          </div></div></div>\n<p>;;;</p>\n</div></details>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torchvision.models</span> <span class=\"string\">import</span> <span class=\"string\">vgg16,</span> <span class=\"string\">VGG16_Weights</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># train_data = torchvision.datasets.ImageNet(&quot;./data&quot;,split=&#x27;train&#x27;,download= True,</span></span><br><span class=\"line\"><span class=\"comment\">#                                            transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置权重文件的存储路径,默认保存到以下路径的checkpoints中</span></span><br><span class=\"line\"><span class=\"string\">torch.hub.set_dir(&#x27;./data&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  The parameter &#x27;pretrained&#x27; is deprecated since 0.13 and may be removed in the future, please use &#x27;weights&#x27; instead.</span></span><br><span class=\"line\"><span class=\"comment\"># vgg16_false = torchvision.models.vgg16(pretrained=False)</span></span><br><span class=\"line\"><span class=\"comment\"># vgg16_true = torchvision.models.vgg16(pretrained=True)</span></span><br><span class=\"line\"><span class=\"string\">vgg16_false</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.models.vgg16(weights=None)</span></span><br><span class=\"line\"><span class=\"string\">vgg16_true</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.models.vgg16(weights=VGG16_Weights.DEFAULT)</span></span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;ok&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">print(vgg16_true)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">train_data</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(&quot;./data&quot;,</span> <span class=\"string\">train=True,</span> <span class=\"string\">download=True,</span> <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改动结构</span></span><br><span class=\"line\"><span class=\"string\">vgg16_true.classifier.add_module(&#x27;add_linear&#x27;,</span> <span class=\"string\">nn.Linear(1000,</span> <span class=\"number\">10</span><span class=\"string\">))</span></span><br><span class=\"line\"><span class=\"string\">print(vgg16_true)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">print(vgg16_false)</span></span><br><span class=\"line\"><span class=\"string\">vgg16_false.classifier[6]</span> <span class=\"string\">=</span> <span class=\"string\">nn.Linear(4096,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\"><span class=\"string\">print(vgg16_false)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"网络模型的保存与读取\"><a class=\"markdownIt-Anchor\" href=\"#网络模型的保存与读取\">#</a> 网络模型的保存与读取</h2>\n<ul>\n<li>模型的保存</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">torch.hub.set_dir(&#x27;./data&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">vgg16</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.models.vgg16(weights=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式1 模型结构+模型参数</span></span><br><span class=\"line\"><span class=\"string\">torch.save(vgg16,&quot;vgg_method1.pth&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2  模型参数（官方推荐）</span></span><br><span class=\"line\"><span class=\"string\">torch.save(vgg16.state_dict(),&quot;vgg_method2.pth&quot;)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>模型的读取</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">model_save</span> <span class=\"string\">import</span> <span class=\"string\">vgg16</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">model_save</span> <span class=\"string\">import</span> <span class=\"string\">*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式1 -&gt; 保存方式1，加载模型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">model</span> <span class=\"string\">=</span> <span class=\"string\">torch.load(&quot;vgg_method1.pth&quot;,weights_only=False)</span></span><br><span class=\"line\"><span class=\"string\">print(model)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2</span></span><br><span class=\"line\"><span class=\"string\">torch.hub.set_dir(&#x27;./data&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">vgg16.load_state_dict(torch.load(&quot;vgg_method2.pth&quot;))</span></span><br><span class=\"line\"><span class=\"comment\"># model2 = torch.load(&quot;vgg_method2.pth&quot;,weights_only=False)</span></span><br><span class=\"line\"><span class=\"string\">print(vgg16)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式1陷阱</span></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.conv1</span> <span class=\"string\">=</span> <span class=\"string\">nn.Conv2d(3,64,kernel_size=3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.conv1(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># xylia = Xylia()</span></span><br><span class=\"line\"><span class=\"comment\"># model = torch.save(xylia,&quot;xylia_method1.pth&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 陷阱1</span></span><br><span class=\"line\"><span class=\"string\">model</span> <span class=\"string\">=</span> <span class=\"string\">torch.load(&quot;xylia_method1.pth&quot;,weights_only=False)</span></span><br><span class=\"line\"><span class=\"string\">print(model)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"完整的模型训练套路\"><a class=\"markdownIt-Anchor\" href=\"#完整的模型训练套路\">#</a> 完整的模型训练套路</h2>\n<ul>\n<li>.item()</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">a</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor(5)</span></span><br><span class=\"line\"><span class=\"string\">print(a)</span></span><br><span class=\"line\"><span class=\"string\">print(a.item())</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>.argmax</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([[0.1,0.2],</span></span><br><span class=\"line\">                        [<span class=\"number\">0.05</span>,<span class=\"number\">0.4</span>]<span class=\"string\">])</span></span><br><span class=\"line\"><span class=\"comment\"># 1横看 0纵看</span></span><br><span class=\"line\"><span class=\"string\">print(outputs.argmax(1))</span></span><br><span class=\"line\"><span class=\"comment\"># print(outputs.argmax(0))</span></span><br><span class=\"line\"><span class=\"string\">preds</span> <span class=\"string\">=</span> <span class=\"string\">outputs.argmax(1)</span></span><br><span class=\"line\"><span class=\"string\">targets</span> <span class=\"string\">=</span> <span class=\"string\">torch.tensor([0,1])</span></span><br><span class=\"line\"><span class=\"string\">print((preds</span> <span class=\"string\">==</span> <span class=\"string\">targets).sum())</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch.optim</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">model</span> <span class=\"string\">import</span> <span class=\"string\">Xylia</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\"><span class=\"string\">train_data</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&#x27;./data&#x27;,</span> <span class=\"string\">train=True,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                          <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">test_data</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&#x27;./data&#x27;,</span> <span class=\"string\">train=False,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                         <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># length 长度</span></span><br><span class=\"line\"><span class=\"string\">train_data_size</span> <span class=\"string\">=</span> <span class=\"string\">len(train_data)</span></span><br><span class=\"line\"><span class=\"string\">test_data_size</span> <span class=\"string\">=</span> <span class=\"string\">len(test_data)</span></span><br><span class=\"line\"><span class=\"string\">print(&quot;训练集的长度为&#123;&#125;&quot;.format(train_data_size))</span></span><br><span class=\"line\"><span class=\"string\">print(&quot;测试集的长度为&#123;&#125;&quot;.format(test_data_size))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用dataloader加载数据集</span></span><br><span class=\"line\"><span class=\"string\">train_dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(train_data,</span> <span class=\"string\">batch_size=64)</span></span><br><span class=\"line\"><span class=\"string\">test_dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(test_data,</span> <span class=\"string\">batch_size=64)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搭建神经网络</span></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.module</span> <span class=\"string\">=</span> <span class=\"string\">nn.Sequential(</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(3,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(32,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(32,</span> <span class=\"number\">64</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Flatten(),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Linear(64</span> <span class=\"string\">*</span> <span class=\"number\">4</span> <span class=\"string\">*</span> <span class=\"number\">4</span><span class=\"string\">,</span> <span class=\"number\">64</span><span class=\"string\">),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Linear(64,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\">        <span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.module(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建损失函数</span></span><br><span class=\"line\"><span class=\"string\">loss_fn</span> <span class=\"string\">=</span> <span class=\"string\">nn.CrossEntropyLoss()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义优化器</span></span><br><span class=\"line\"><span class=\"comment\"># 1e-2=1*(10)^(-2)=1</span></span><br><span class=\"line\"><span class=\"string\">leaning_rate</span> <span class=\"string\">=</span> <span class=\"number\">0.01</span></span><br><span class=\"line\"><span class=\"string\">optimizer</span> <span class=\"string\">=</span> <span class=\"string\">torch.optim.SGD(xylia.parameters(),</span> <span class=\"string\">lr=leaning_rate)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\"><span class=\"string\">total_train_step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\"><span class=\"string\">total_test_step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练轮数</span></span><br><span class=\"line\"><span class=\"string\">epoch</span> <span class=\"string\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"string\">total_accuracy</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&#x27;./log_train&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">for epoch in range(epoch):</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;----------------------------第&#123;&#125;轮开始--------------------------&quot;.format(epoch))</span></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    <span class=\"string\">xylia.train()</span></span><br><span class=\"line\">    <span class=\"attr\">for data in train_dataloader:</span></span><br><span class=\"line\">        <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">        <span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">loss_fn(outputs,</span> <span class=\"string\">targets)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        <span class=\"comment\"># 梯度清零</span></span><br><span class=\"line\">        <span class=\"string\">optimizer.zero_grad()</span></span><br><span class=\"line\">        <span class=\"string\">loss.backward()</span></span><br><span class=\"line\">        <span class=\"string\">optimizer.step()</span></span><br><span class=\"line\">        <span class=\"string\">total_train_step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;训练次数：&#123;&#125;，loss：&#123;&#125;&quot;.format(total_train_step, loss))</span></span><br><span class=\"line\">        <span class=\"string\">if</span> <span class=\"string\">total_train_step</span> <span class=\"string\">%</span> <span class=\"number\">100</span> <span class=\"string\">==</span> <span class=\"attr\">0:</span></span><br><span class=\"line\">            <span class=\"string\">print(&quot;训练次数：&#123;&#125;，loss：&#123;&#125;&quot;.format(total_train_step,</span> <span class=\"string\">loss.item()))</span></span><br><span class=\"line\">            <span class=\"string\">writer.add_scalar(&#x27;train_loss&#x27;,</span> <span class=\"string\">loss.item(),</span> <span class=\"string\">total_train_step)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断模型是否训练好/达到需求，评估</span></span><br><span class=\"line\">    <span class=\"comment\"># 测试</span></span><br><span class=\"line\">    <span class=\"string\">xylia.eval()</span></span><br><span class=\"line\">    <span class=\"string\">total_test_loss</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 去掉梯度</span></span><br><span class=\"line\">    <span class=\"attr\">with torch.no_grad():</span></span><br><span class=\"line\">        <span class=\"attr\">for data in test_dataloader:</span></span><br><span class=\"line\">            <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">            <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">            <span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">loss_fn(outputs,</span> <span class=\"string\">targets)</span></span><br><span class=\"line\">            <span class=\"string\">total_test_loss</span> <span class=\"string\">+=</span> <span class=\"string\">loss.item()</span></span><br><span class=\"line\">            <span class=\"string\">accuracy</span> <span class=\"string\">=</span> <span class=\"string\">(outputs.argmax(1)</span> <span class=\"string\">==</span> <span class=\"string\">targets).sum()</span></span><br><span class=\"line\">            <span class=\"string\">total_accuracy</span> <span class=\"string\">+=</span> <span class=\"string\">accuracy.item()</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;整体测试集上的loss：&#123;&#125;&quot;.format(total_test_loss))</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;整体测试集上的正确率：&#123;&#125;&quot;.format(total_accuracy</span> <span class=\"string\">/</span> <span class=\"string\">train_data_size))</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(&#x27;test_loss&#x27;,</span> <span class=\"string\">total_test_loss,</span> <span class=\"string\">total_test_step)</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(&#x27;test_accuracy&#x27;,</span> <span class=\"string\">total_accuracy</span> <span class=\"string\">/</span> <span class=\"string\">train_data_size,</span> <span class=\"string\">total_test_step)</span></span><br><span class=\"line\">    <span class=\"string\">total_test_step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">torch.save(xylia,&quot;xylia_&#123;&#125;.pth&quot;.format(epoch))</span></span><br><span class=\"line\">    <span class=\"comment\"># torch.save(xylia.state.dict(),&quot;xylia_&#123;&#125;.pth&quot;.format(i))</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;模型已保存&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"利用gpu训练\"><a class=\"markdownIt-Anchor\" href=\"#利用gpu训练\">#</a> 利用 GPU 训练</h2>\n<p>只有网络模型，数据（输入，标注），损失函数有.cuda () 方法</p>\n<ul>\n<li>.cuda()</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```gpu</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch.optim</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">time</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\"><span class=\"string\">train_data</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&#x27;./data&#x27;,</span> <span class=\"string\">train=True,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                          <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">test_data</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&#x27;./data&#x27;,</span> <span class=\"string\">train=False,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                         <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># length 长度</span></span><br><span class=\"line\"><span class=\"string\">train_data_size</span> <span class=\"string\">=</span> <span class=\"string\">len(train_data)</span></span><br><span class=\"line\"><span class=\"string\">test_data_size</span> <span class=\"string\">=</span> <span class=\"string\">len(test_data)</span></span><br><span class=\"line\"><span class=\"string\">print(&quot;训练集的长度为&#123;&#125;&quot;.format(train_data_size))</span></span><br><span class=\"line\"><span class=\"string\">print(&quot;测试集的长度为&#123;&#125;&quot;.format(test_data_size))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用dataloader加载数据集</span></span><br><span class=\"line\"><span class=\"string\">train_dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(train_data,</span> <span class=\"string\">batch_size=64)</span></span><br><span class=\"line\"><span class=\"string\">test_dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(test_data,</span> <span class=\"string\">batch_size=64)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搭建神经网络</span></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.module</span> <span class=\"string\">=</span> <span class=\"string\">nn.Sequential(</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(3,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(32,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(32,</span> <span class=\"number\">64</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Flatten(),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Linear(64</span> <span class=\"string\">*</span> <span class=\"number\">4</span> <span class=\"string\">*</span> <span class=\"number\">4</span><span class=\"string\">,</span> <span class=\"number\">64</span><span class=\"string\">),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Linear(64,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\">        <span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.module(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"attr\">if torch.cuda.is_available():</span></span><br><span class=\"line\">    <span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">xylia.cuda()</span>    <span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建损失函数</span></span><br><span class=\"line\"><span class=\"string\">loss_fn</span> <span class=\"string\">=</span> <span class=\"string\">nn.CrossEntropyLoss()</span></span><br><span class=\"line\"><span class=\"attr\">if torch.cuda.is_available():</span></span><br><span class=\"line\">    <span class=\"string\">loss_fn</span> <span class=\"string\">=</span> <span class=\"string\">loss_fn.cuda()</span>     <span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义优化器</span></span><br><span class=\"line\"><span class=\"comment\"># 1e-2=1*(10)^(-2)=1</span></span><br><span class=\"line\"><span class=\"string\">leaning_rate</span> <span class=\"string\">=</span> <span class=\"number\">0.01</span></span><br><span class=\"line\"><span class=\"string\">optimizer</span> <span class=\"string\">=</span> <span class=\"string\">torch.optim.SGD(xylia.parameters(),</span> <span class=\"string\">lr=leaning_rate)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\"><span class=\"string\">total_train_step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\"><span class=\"string\">total_test_step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练轮数</span></span><br><span class=\"line\"><span class=\"string\">epoch</span> <span class=\"string\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"string\">total_accuracy</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&#x27;./log_train&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">start_time</span> <span class=\"string\">=</span> <span class=\"string\">time.time()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">for epoch in range(epoch):</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;----------------------------第&#123;&#125;轮开始--------------------------&quot;.format(epoch))</span></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    <span class=\"attr\">for data in train_dataloader:</span></span><br><span class=\"line\">        <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"attr\">if torch.cuda.is_available():</span></span><br><span class=\"line\">            <span class=\"string\">imgs</span> <span class=\"string\">=</span> <span class=\"string\">imgs.cuda()</span></span><br><span class=\"line\">            <span class=\"string\">targets=</span> <span class=\"string\">targets.cuda()</span></span><br><span class=\"line\">        <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">        <span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">loss_fn(outputs,</span> <span class=\"string\">targets)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        <span class=\"comment\"># 梯度清零</span></span><br><span class=\"line\">        <span class=\"string\">optimizer.zero_grad()</span></span><br><span class=\"line\">        <span class=\"string\">loss.backward()</span></span><br><span class=\"line\">        <span class=\"string\">optimizer.step()</span></span><br><span class=\"line\">        <span class=\"string\">total_train_step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;训练次数：&#123;&#125;，loss：&#123;&#125;&quot;.format(total_train_step, loss))</span></span><br><span class=\"line\">        <span class=\"string\">if</span> <span class=\"string\">total_train_step</span> <span class=\"string\">%</span> <span class=\"number\">100</span> <span class=\"string\">==</span> <span class=\"attr\">0:</span></span><br><span class=\"line\">            <span class=\"string\">end_time</span> <span class=\"string\">=</span> <span class=\"string\">time.time()</span></span><br><span class=\"line\">            <span class=\"string\">print(end_time</span> <span class=\"bullet\">-</span> <span class=\"string\">start_time)</span></span><br><span class=\"line\">            <span class=\"string\">print(&quot;训练次数：&#123;&#125;，loss：&#123;&#125;&quot;.format(total_train_step,</span> <span class=\"string\">loss.item()))</span></span><br><span class=\"line\">            <span class=\"string\">writer.add_scalar(&#x27;train_loss&#x27;,</span> <span class=\"string\">loss.item(),</span> <span class=\"string\">total_train_step)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断模型是否训练好/达到需求，评估</span></span><br><span class=\"line\">    <span class=\"comment\"># 测试</span></span><br><span class=\"line\">    <span class=\"string\">total_test_loss</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">with torch.no_grad():</span></span><br><span class=\"line\">        <span class=\"attr\">for data in test_dataloader:</span></span><br><span class=\"line\">            <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">            <span class=\"attr\">if torch.cuda.is_available():</span></span><br><span class=\"line\">                <span class=\"string\">imgs=</span> <span class=\"string\">imgs.cuda()</span></span><br><span class=\"line\">                <span class=\"string\">targets</span> <span class=\"string\">=</span> <span class=\"string\">targets.cuda()</span></span><br><span class=\"line\">            <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">            <span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">loss_fn(outputs,</span> <span class=\"string\">targets)</span></span><br><span class=\"line\">            <span class=\"string\">total_test_loss</span> <span class=\"string\">+=</span> <span class=\"string\">loss.item()</span></span><br><span class=\"line\">            <span class=\"string\">accuracy</span> <span class=\"string\">=</span> <span class=\"string\">(outputs.argmax(1)</span> <span class=\"string\">==</span> <span class=\"string\">targets).sum()</span></span><br><span class=\"line\">            <span class=\"string\">total_accuracy</span> <span class=\"string\">+=</span> <span class=\"string\">accuracy.item()</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;整体测试集上的loss：&#123;&#125;&quot;.format(total_test_loss))</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;整体测试集上的正确率：&#123;&#125;&quot;.format(total_accuracy</span> <span class=\"string\">/</span> <span class=\"string\">train_data_size))</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(&#x27;test_loss&#x27;,</span> <span class=\"string\">total_test_loss,</span> <span class=\"string\">total_test_step)</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(&#x27;test_accuracy&#x27;,</span> <span class=\"string\">total_accuracy</span> <span class=\"string\">/</span> <span class=\"string\">train_data_size,</span> <span class=\"string\">total_test_step)</span></span><br><span class=\"line\">    <span class=\"string\">total_test_step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">torch.save(xylia,&quot;xylia_&#123;&#125;.pth&quot;.format(epoch))</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;模型已保存&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2xhYi5nb29nbGUv\">colab.google</span></p>\n<ul>\n<li>.to(device)</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch.optim</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn,</span> <span class=\"string\">device</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">time</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个设备</span></span><br><span class=\"line\"><span class=\"string\">decive</span> <span class=\"string\">=</span> <span class=\"string\">torch.device(&#x27;cpu&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># decive = torch.device(&#x27;cuda&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># decive = torch.device(&#x27;cuda:0&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># decive = torch.device(&#x27;cuda:0&#x27;,if torch.cuda.is_available() else &quot;cpu&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备数据集</span></span><br><span class=\"line\"><span class=\"string\">train_data</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&#x27;./data&#x27;,</span> <span class=\"string\">train=True,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                          <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">test_data</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&#x27;./data&#x27;,</span> <span class=\"string\">train=False,</span> <span class=\"string\">download=True,</span></span><br><span class=\"line\">                                         <span class=\"string\">transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># length 长度</span></span><br><span class=\"line\"><span class=\"string\">train_data_size</span> <span class=\"string\">=</span> <span class=\"string\">len(train_data)</span></span><br><span class=\"line\"><span class=\"string\">test_data_size</span> <span class=\"string\">=</span> <span class=\"string\">len(test_data)</span></span><br><span class=\"line\"><span class=\"string\">print(&quot;训练集的长度为&#123;&#125;&quot;.format(train_data_size))</span></span><br><span class=\"line\"><span class=\"string\">print(&quot;测试集的长度为&#123;&#125;&quot;.format(test_data_size))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用dataloader加载数据集</span></span><br><span class=\"line\"><span class=\"string\">train_dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(train_data,</span> <span class=\"string\">batch_size=64)</span></span><br><span class=\"line\"><span class=\"string\">test_dataloader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(test_data,</span> <span class=\"string\">batch_size=64)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搭建神经网络</span></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.module</span> <span class=\"string\">=</span> <span class=\"string\">nn.Sequential(</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(3,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(32,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(32,</span> <span class=\"number\">64</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Flatten(),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Linear(64</span> <span class=\"string\">*</span> <span class=\"number\">4</span> <span class=\"string\">*</span> <span class=\"number\">4</span><span class=\"string\">,</span> <span class=\"number\">64</span><span class=\"string\">),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Linear(64,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\">        <span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.module(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络模型</span></span><br><span class=\"line\"><span class=\"string\">xylia</span> <span class=\"string\">=</span> <span class=\"string\">Xylia()</span></span><br><span class=\"line\"><span class=\"string\">xylia.to(device)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建损失函数</span></span><br><span class=\"line\"><span class=\"string\">loss_fn</span> <span class=\"string\">=</span> <span class=\"string\">nn.CrossEntropyLoss()</span></span><br><span class=\"line\"><span class=\"string\">loss_fn</span> <span class=\"string\">=</span> <span class=\"string\">loss_fn.to(device)</span>   <span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义优化器</span></span><br><span class=\"line\"><span class=\"comment\"># 1e-2=1*(10)^(-2)=1</span></span><br><span class=\"line\"><span class=\"string\">leaning_rate</span> <span class=\"string\">=</span> <span class=\"number\">0.01</span></span><br><span class=\"line\"><span class=\"string\">optimizer</span> <span class=\"string\">=</span> <span class=\"string\">torch.optim.SGD(xylia.parameters(),</span> <span class=\"string\">lr=leaning_rate)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置训练网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 记录训练的次数</span></span><br><span class=\"line\"><span class=\"string\">total_train_step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 记录测试的次数</span></span><br><span class=\"line\"><span class=\"string\">total_test_step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 训练轮数</span></span><br><span class=\"line\"><span class=\"string\">epoch</span> <span class=\"string\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"string\">total_accuracy</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加tensorboard</span></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&#x27;./log_train&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">start_time</span> <span class=\"string\">=</span> <span class=\"string\">time.time()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">for epoch in range(epoch):</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;----------------------------第&#123;&#125;轮开始--------------------------&quot;.format(epoch))</span></span><br><span class=\"line\">    <span class=\"comment\"># 训练步骤开始</span></span><br><span class=\"line\">    <span class=\"attr\">for data in train_dataloader:</span></span><br><span class=\"line\">        <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"string\">imgs</span> <span class=\"string\">=</span> <span class=\"string\">imgs.to(device)</span></span><br><span class=\"line\">        <span class=\"string\">targets</span> <span class=\"string\">=</span> <span class=\"string\">targets.to(device)</span></span><br><span class=\"line\">        <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">        <span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">loss_fn(outputs,</span> <span class=\"string\">targets)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 优化器优化模型</span></span><br><span class=\"line\">        <span class=\"comment\"># 梯度清零</span></span><br><span class=\"line\">        <span class=\"string\">optimizer.zero_grad()</span></span><br><span class=\"line\">        <span class=\"string\">loss.backward()</span></span><br><span class=\"line\">        <span class=\"string\">optimizer.step()</span></span><br><span class=\"line\">        <span class=\"string\">total_train_step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;训练次数：&#123;&#125;，loss：&#123;&#125;&quot;.format(total_train_step, loss))</span></span><br><span class=\"line\">        <span class=\"string\">if</span> <span class=\"string\">total_train_step</span> <span class=\"string\">%</span> <span class=\"number\">100</span> <span class=\"string\">==</span> <span class=\"attr\">0:</span></span><br><span class=\"line\">            <span class=\"string\">end_time</span> <span class=\"string\">=</span> <span class=\"string\">time.time()</span></span><br><span class=\"line\">            <span class=\"string\">print(end_time</span> <span class=\"bullet\">-</span> <span class=\"string\">start_time)</span></span><br><span class=\"line\">            <span class=\"string\">print(&quot;训练次数：&#123;&#125;，loss：&#123;&#125;&quot;.format(total_train_step,</span> <span class=\"string\">loss.item()))</span></span><br><span class=\"line\">            <span class=\"string\">writer.add_scalar(&#x27;train_loss&#x27;,</span> <span class=\"string\">loss.item(),</span> <span class=\"string\">total_train_step)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断模型是否训练好/达到需求，评估</span></span><br><span class=\"line\">    <span class=\"comment\"># 测试</span></span><br><span class=\"line\">    <span class=\"string\">total_test_loss</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">with torch.no_grad():</span></span><br><span class=\"line\">        <span class=\"attr\">for data in test_dataloader:</span></span><br><span class=\"line\">            <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">            <span class=\"string\">imgs</span> <span class=\"string\">=</span> <span class=\"string\">imgs.to(device)</span></span><br><span class=\"line\">            <span class=\"string\">targets</span> <span class=\"string\">=</span> <span class=\"string\">targets.to(device)</span></span><br><span class=\"line\">            <span class=\"string\">outputs</span> <span class=\"string\">=</span> <span class=\"string\">xylia(imgs)</span></span><br><span class=\"line\">            <span class=\"string\">loss</span> <span class=\"string\">=</span> <span class=\"string\">loss_fn(outputs,</span> <span class=\"string\">targets)</span></span><br><span class=\"line\">            <span class=\"string\">total_test_loss</span> <span class=\"string\">+=</span> <span class=\"string\">loss.item()</span></span><br><span class=\"line\">            <span class=\"string\">accuracy</span> <span class=\"string\">=</span> <span class=\"string\">(outputs.argmax(1)</span> <span class=\"string\">==</span> <span class=\"string\">targets).sum()</span></span><br><span class=\"line\">            <span class=\"string\">total_accuracy</span> <span class=\"string\">+=</span> <span class=\"string\">accuracy.item()</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;整体测试集上的loss：&#123;&#125;&quot;.format(total_test_loss))</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;整体测试集上的正确率：&#123;&#125;&quot;.format(total_accuracy</span> <span class=\"string\">/</span> <span class=\"string\">train_data_size))</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(&#x27;test_loss&#x27;,</span> <span class=\"string\">total_test_loss,</span> <span class=\"string\">total_test_step)</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(&#x27;test_accuracy&#x27;,</span> <span class=\"string\">total_accuracy</span> <span class=\"string\">/</span> <span class=\"string\">train_data_size,</span> <span class=\"string\">total_test_step)</span></span><br><span class=\"line\">    <span class=\"string\">total_test_step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">torch.save(xylia,&quot;xylia_&#123;&#125;.pth&quot;.format(epoch))</span></span><br><span class=\"line\">    <span class=\"string\">print(&quot;模型已保存&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"完整的模型验证测试demo套路\"><a class=\"markdownIt-Anchor\" href=\"#完整的模型验证测试demo套路\">#</a> 完整的模型验证 (测试，demo) 套路</h2>\n<p>利用已经训练好的模型，然后给它提供一个输入</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">PIL</span> <span class=\"string\">import</span> <span class=\"string\">Image</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch</span> <span class=\"string\">import</span> <span class=\"string\">nn</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">device</span> <span class=\"string\">=</span> <span class=\"string\">torch.device(&quot;cuda&quot;</span> <span class=\"string\">if</span> <span class=\"string\">torch.cuda.is_available()</span> <span class=\"string\">else</span> <span class=\"string\">&quot;cpu&quot;</span><span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">img_path</span> <span class=\"string\">=</span> <span class=\"string\">&quot;./imgs/dog.jpg&quot;</span></span><br><span class=\"line\"><span class=\"string\">image</span> <span class=\"string\">=</span> <span class=\"string\">Image.open(img_path)</span></span><br><span class=\"line\"><span class=\"string\">print(image)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">transforms</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.transforms.Compose([torchvision.transforms.Resize((32,32)),</span></span><br><span class=\"line\">                                            <span class=\"string\">torchvision.transforms.ToTensor()])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">image</span> <span class=\"string\">=</span> <span class=\"string\">transforms(image)</span></span><br><span class=\"line\"><span class=\"string\">print(image.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">class Xylia(nn.Module):</span></span><br><span class=\"line\">    <span class=\"attr\">def __init__(self):</span></span><br><span class=\"line\">        <span class=\"string\">super(Xylia,</span> <span class=\"string\">self).__init__()</span></span><br><span class=\"line\">        <span class=\"string\">self.module</span> <span class=\"string\">=</span> <span class=\"string\">nn.Sequential(</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(3,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(32,</span> <span class=\"number\">32</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Conv2d(32,</span> <span class=\"number\">64</span><span class=\"string\">,</span> <span class=\"string\">kernel_size=5,</span> <span class=\"string\">stride=1,</span> <span class=\"string\">padding=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.MaxPool2d(kernel_size=2),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Flatten(),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Linear(64</span> <span class=\"string\">*</span> <span class=\"number\">4</span> <span class=\"string\">*</span> <span class=\"number\">4</span><span class=\"string\">,</span> <span class=\"number\">64</span><span class=\"string\">),</span></span><br><span class=\"line\">            <span class=\"string\">nn.Linear(64,</span> <span class=\"number\">10</span><span class=\"string\">)</span></span><br><span class=\"line\">        <span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">forward(self,</span> <span class=\"attr\">x):</span></span><br><span class=\"line\">        <span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">self.module(x)</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">model</span> <span class=\"string\">=</span> <span class=\"string\">torch.load(&quot;xylia_9.pth&quot;,weights_only=False)</span></span><br><span class=\"line\"><span class=\"string\">print(model)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将模型和输入数据移动到同一设备</span></span><br><span class=\"line\"><span class=\"string\">model</span> <span class=\"string\">=</span> <span class=\"string\">model.to(device)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">image</span> <span class=\"string\">=</span> <span class=\"string\">torch.reshape(image,(1,3,32,32))</span></span><br><span class=\"line\"><span class=\"string\">image</span> <span class=\"string\">=</span> <span class=\"string\">image.to(device)</span></span><br><span class=\"line\"><span class=\"string\">model.eval()</span></span><br><span class=\"line\"><span class=\"attr\">with torch.no_grad():</span></span><br><span class=\"line\">    <span class=\"string\">output</span> <span class=\"string\">=</span> <span class=\"string\">model(image)</span></span><br><span class=\"line\"><span class=\"string\">print(output)</span></span><br><span class=\"line\"><span class=\"string\">print(output.argmax(dim=1))</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Mia-Xylia/Mia-Xylia-pictures@master/img/09612e111516390645e8f5710aadede.png\" alt=\"img\"></p>\n",
            "tags": [
                "笔记",
                "pytorch基础"
            ]
        },
        {
            "id": "http://example.com/2025/03/25/computer-science/python/pytorch1/",
            "url": "http://example.com/2025/03/25/computer-science/python/pytorch1/",
            "title": "笔记：PyTorch(1)",
            "date_published": "2025-03-24T16:00:00.000Z",
            "content_html": "<h1 id=\"加载数据的方式\"><a class=\"markdownIt-Anchor\" href=\"#加载数据的方式\">#</a> 加载数据的方式</h1>\n<ul>\n<li>Dataset<br>\n 提供一种方式去获取数据及其 label<br>\n 如何获取每一个数据及其 label<br>\n 告诉我们总共有多少的数据</li>\n<li>Dataloader<br>\n 为后面网络提供不同的数据形式</li>\n</ul>\n<h1 id=\"使用dataset\"><a class=\"markdownIt-Anchor\" href=\"#使用dataset\">#</a> 使用 dataset</h1>\n<ul>\n<li>查看 dataset 的使用说明</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```jupyter</span> <span class=\"string\">notebook</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">Dataset</span></span><br><span class=\"line\"><span class=\"string\">help(Dataset)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>实战</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">Dataset</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">PIL</span> <span class=\"string\">import</span> <span class=\"string\">Image</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">os</span></span><br><span class=\"line\"><span class=\"attr\">class MyData(Dataset):</span></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">__init__(self,root_dir,lable_dir):</span></span><br><span class=\"line\">        <span class=\"string\">self.root_dir</span> <span class=\"string\">=</span> <span class=\"string\">root_dir</span></span><br><span class=\"line\">        <span class=\"string\">self.lable_dir</span> <span class=\"string\">=</span> <span class=\"string\">lable_dir</span></span><br><span class=\"line\">        <span class=\"string\">self.path</span> <span class=\"string\">=</span> <span class=\"string\">os.path.join(self.root_dir,self.lable_dir)</span></span><br><span class=\"line\">        <span class=\"string\">self.img_path</span> <span class=\"string\">=</span> <span class=\"string\">os.listdir(self.path)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">__getitem__(self,</span> <span class=\"attr\">index):</span></span><br><span class=\"line\">        <span class=\"string\">img_name</span> <span class=\"string\">=</span> <span class=\"string\">self.img_path[index]</span></span><br><span class=\"line\">        <span class=\"string\">img_item_path</span> <span class=\"string\">=</span> <span class=\"string\">os.path.join(self.root_dir,self.lable_dir,img_name)</span></span><br><span class=\"line\">        <span class=\"string\">img</span> <span class=\"string\">=</span> <span class=\"string\">Image.open(img_item_path)</span></span><br><span class=\"line\">        <span class=\"string\">label</span> <span class=\"string\">=</span> <span class=\"string\">self.lable_dir</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">img,</span> <span class=\"string\">label</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">def __len__(self):</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"string\">len(self.img_path)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">root_dir</span> <span class=\"string\">=</span> <span class=\"string\">r&#x27;dataset/train&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ants_lable_dir</span> <span class=\"string\">=</span> <span class=\"string\">&#x27;ants_image&#x27;</span></span><br><span class=\"line\"><span class=\"string\">bees_lable_dir</span> <span class=\"string\">=</span> <span class=\"string\">&#x27;bees_image&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ants_dataset</span> <span class=\"string\">=</span> <span class=\"string\">MyData(root_dir,ants_lable_dir)</span></span><br><span class=\"line\"><span class=\"string\">bees_dataset</span> <span class=\"string\">=</span> <span class=\"string\">MyData(root_dir,bees_lable_dir)</span></span><br><span class=\"line\"><span class=\"comment\"># 合并数据</span></span><br><span class=\"line\"><span class=\"string\">dataset</span> <span class=\"string\">=</span> <span class=\"string\">ants_dataset</span> <span class=\"string\">+</span> <span class=\"string\">bees_dataset</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看长度</span></span><br><span class=\"line\"><span class=\"string\">len(ants_lable_dir)</span></span><br><span class=\"line\"><span class=\"string\">len(bees_lable_dir)</span></span><br><span class=\"line\"><span class=\"string\">len(dataset)</span></span><br><span class=\"line\"><span class=\"string\">print(f&quot;一共有&#123;len(dataset)&#125;张图片&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># 展示图片</span></span><br><span class=\"line\"><span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">input(&quot;请输入你想查询的图片编号&quot;)</span></span><br><span class=\"line\"><span class=\"string\">x</span> <span class=\"string\">=</span> <span class=\"string\">int(x)</span></span><br><span class=\"line\"><span class=\"string\">img,label</span> <span class=\"string\">=</span> <span class=\"string\">dataset[x]</span></span><br><span class=\"line\"><span class=\"string\">img.show()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"tensorboard的使用\"><a class=\"markdownIt-Anchor\" href=\"#tensorboard的使用\">#</a> TensorBoard 的使用</h2>\n<ul>\n<li>安装 tensorboard</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```终端</span></span><br><span class=\"line\"><span class=\"string\">pip</span> <span class=\"string\">install</span> <span class=\"string\">tensorboard</span></span><br><span class=\"line\"><span class=\"comment\"># logdir = 事件文件所在文件夹名</span></span><br><span class=\"line\"><span class=\"string\">tensorboard</span> <span class=\"string\">--logdir=log</span> <span class=\"string\">--port=6007</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用add_scalar\"><a class=\"markdownIt-Anchor\" href=\"#使用add_scalar\">#</a> 使用 add_scalar</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;log&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># writer.add_image()</span></span><br><span class=\"line\"><span class=\"comment\"># y = 2x</span></span><br><span class=\"line\"><span class=\"attr\">for i in range(100):</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(tag=&quot;y=x&quot;,</span> <span class=\"string\">scalar_value=i,</span> <span class=\"string\">global_step=i)</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(tag=&quot;y=2x&quot;,</span> <span class=\"string\">scalar_value=2*i,</span> <span class=\"string\">global_step=i)#</span> <span class=\"string\">标题，数值（y轴），训练的步数（x轴）</span></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">```终端</span></span><br><span class=\"line\"><span class=\"string\">tensorboard</span> <span class=\"string\">--logdir=log</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用add_image\"><a class=\"markdownIt-Anchor\" href=\"#使用add_image\">#</a> 使用 add_image</h3>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python控制台</span></span><br><span class=\"line\"><span class=\"string\">image_path</span> <span class=\"string\">=</span> <span class=\"string\">&quot;dataset/train/ants_image/0013035.jpg&quot;</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">PIL</span> <span class=\"string\">import</span> <span class=\"string\">Image</span></span><br><span class=\"line\"><span class=\"string\">img</span> <span class=\"string\">=</span> <span class=\"string\">Image.open(image_path)</span></span><br><span class=\"line\"><span class=\"string\">print(type(img))</span> </span><br><span class=\"line\"><span class=\"string\">&lt;class</span> <span class=\"string\">&#x27;PIL.JpegImagePlugin.JpegImageFile&#x27;</span><span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<details class=\"success\"><summary>img的类型不符合add_image</summary><div>\n<p>img_tensor (torch.Tensor, numpy.ndarray, or string/blobname): Image data</p>\n</div></details>\n<ul>\n<li>使用 opencv 读取图片，获得 numpy 型图片数据</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```终端</span></span><br><span class=\"line\"><span class=\"string\">pip</span> <span class=\"string\">install</span> <span class=\"string\">opencv-python</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">cv2</span></span><br><span class=\"line\"><span class=\"string\">cv_img</span> <span class=\"string\">=</span> <span class=\"string\">cv2.imread(img_path)</span></span><br><span class=\"line\"><span class=\"string\">print(type(cv_img))</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用 numpy.array ()，对 PIL 图片进行转换</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python控制台</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">numpy</span> <span class=\"string\">as</span> <span class=\"string\">np</span></span><br><span class=\"line\"><span class=\"string\">img_array</span> <span class=\"string\">=</span> <span class=\"string\">np.array(img)</span></span><br><span class=\"line\"><span class=\"string\">print(type(img_array))</span></span><br><span class=\"line\"><span class=\"string\">&lt;class</span> <span class=\"string\">&#x27;numpy.ndarray&#x27;</span><span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>实战</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">PIL</span> <span class=\"string\">import</span> <span class=\"string\">Image</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">numpy</span> <span class=\"string\">as</span> <span class=\"string\">np</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;log&quot;)</span></span><br><span class=\"line\"><span class=\"string\">img_path</span> <span class=\"string\">=</span> <span class=\"string\">&quot;dataset/train/bees_image/16838648_415acd9e3f.jpg&quot;</span></span><br><span class=\"line\"><span class=\"string\">img_PIL</span> <span class=\"string\">=</span> <span class=\"string\">Image.open(img_path)</span></span><br><span class=\"line\"><span class=\"string\">img_array</span> <span class=\"string\">=</span> <span class=\"string\">np.array(img_PIL)</span></span><br><span class=\"line\"><span class=\"string\">print(type(img_array))</span></span><br><span class=\"line\"><span class=\"string\">print(img_array.shape)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.add_image(&quot;test&quot;,img_array,2,dataformats=&#x27;HWC&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># y = 2x</span></span><br><span class=\"line\"><span class=\"attr\">for i in range(100):</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(tag=&quot;y=x&quot;,</span> <span class=\"string\">scalar_value=i,</span> <span class=\"string\">global_step=i)</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_scalar(tag=&quot;y=2x&quot;,</span> <span class=\"string\">scalar_value=2*i,</span> <span class=\"string\">global_step=i)#</span> <span class=\"string\">标题，数值（y轴），训练的步数（x轴）</span></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"常见的transforms\"><a class=\"markdownIt-Anchor\" href=\"#常见的transforms\">#</a> 常见的 Transforms</h1>\n<p>关注输入，输出和作用</p>\n<details class=\"success\"><summary>init__call__的作用</summary><div>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"attr\">class Person:</span></span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">__call__(self,name):</span></span><br><span class=\"line\">        <span class=\"string\">print(&quot;__call__&quot;+&quot;Helle&quot;+name)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">def</span> <span class=\"string\">hello(self,name):</span></span><br><span class=\"line\">        <span class=\"string\">print(&quot;hello&quot;+name)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">person</span> <span class=\"string\">=</span> <span class=\"string\">Person()</span></span><br><span class=\"line\"><span class=\"string\">person(&quot;张三&quot;)</span></span><br><span class=\"line\"><span class=\"string\">person.hello(&quot;lisi&quot;)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<p><span class=\"label\">例子</span></p>\n</div></details>\n<h2 id=\"对比\"><a class=\"markdownIt-Anchor\" href=\"#对比\">#</a> 对比</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">PIL</span> <span class=\"string\">import</span> <span class=\"string\">Image</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torchvision</span> <span class=\"string\">import</span>  <span class=\"string\">transforms</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 相对路径</span></span><br><span class=\"line\"><span class=\"comment\"># PIL</span></span><br><span class=\"line\"><span class=\"string\">img_path</span> <span class=\"string\">=&quot;dataset/train/ants_image/0013035.jpg&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 绝对路径</span></span><br><span class=\"line\"><span class=\"comment\"># img_path_abs = r&quot;F:\\doc\\python\\1\\Learn-PyTorch\\dataset\\train\\ants_image\\0013035.jpg&quot;</span></span><br><span class=\"line\"><span class=\"string\">img</span> <span class=\"string\">=</span> <span class=\"string\">Image.open(img_path)</span></span><br><span class=\"line\"><span class=\"string\">print(type(img))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tensor</span></span><br><span class=\"line\"><span class=\"string\">tensor_trans</span> <span class=\"string\">=</span> <span class=\"string\">transforms.ToTensor()</span></span><br><span class=\"line\"><span class=\"string\">tensor_img</span> <span class=\"string\">=</span> <span class=\"string\">tensor_trans(img)</span></span><br><span class=\"line\"><span class=\"string\">print(tensor_img)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<p>创建具体的工具 tensor_trans，使用这个具体的工具，给它一个输入 img，获得一个输出</p>\n<h2 id=\"transformstotensor\"><a class=\"markdownIt-Anchor\" href=\"#transformstotensor\">#</a> transforms.ToTensor</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">PIL</span> <span class=\"string\">import</span> <span class=\"string\">Image</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torchvision</span> <span class=\"string\">import</span>  <span class=\"string\">transforms</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">cv2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">img_path</span> <span class=\"string\">=&quot;dataset/train/ants_image/0013035.jpg&quot;</span></span><br><span class=\"line\"><span class=\"string\">print(type(img))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">tensor_trans</span> <span class=\"string\">=</span> <span class=\"string\">transforms.ToTensor()</span></span><br><span class=\"line\"><span class=\"string\">tensor_img</span> <span class=\"string\">=</span> <span class=\"string\">tensor_trans(img)</span></span><br><span class=\"line\"><span class=\"string\">print(tensor_img)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;log&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.add_image(&quot;Tensor_img&quot;,tensor_img)</span></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"topilimage\"><a class=\"markdownIt-Anchor\" href=\"#topilimage\">#</a> ToPILImage</h2>\n<p>作用：把数据转化为 PIL 的数据类型</p>\n<h2 id=\"normalize\"><a class=\"markdownIt-Anchor\" href=\"#normalize\">#</a> Normalize</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">print(img_tensor[0][0][0])</span></span><br><span class=\"line\"><span class=\"string\">trans_norm</span> <span class=\"string\">=</span> <span class=\"string\">transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])</span></span><br><span class=\"line\"><span class=\"comment\"># trans_norm只能输入tensor数据类型</span></span><br><span class=\"line\"><span class=\"string\">img_norm</span> <span class=\"string\">=</span> <span class=\"string\">trans_norm(img_tensor)</span></span><br><span class=\"line\"><span class=\"string\">print(img_norm[0][0][0])</span></span><br><span class=\"line\"><span class=\"string\">writer.add_image(&quot;Normalize&quot;,img_norm)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"resize\"><a class=\"markdownIt-Anchor\" href=\"#resize\">#</a> Resize</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">print(img.size)</span></span><br><span class=\"line\"><span class=\"string\">trans_resize</span> <span class=\"string\">=</span> <span class=\"string\">transforms.Resize((512,512))</span></span><br><span class=\"line\"><span class=\"comment\"># 输入类型为PIL</span></span><br><span class=\"line\"><span class=\"string\">img_resize</span> <span class=\"string\">=</span> <span class=\"string\">trans_resize(img)</span></span><br><span class=\"line\"><span class=\"comment\"># 查看返回值类型，为PIL</span></span><br><span class=\"line\"><span class=\"string\">print(img_resize)</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据类型变为tensor</span></span><br><span class=\"line\"><span class=\"string\">img_resize</span> <span class=\"string\">=</span> <span class=\"string\">trans_totenser(img_resize)</span></span><br><span class=\"line\"><span class=\"string\">writer.add_image(&quot;Resize&quot;,img_resize,0)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"compose-resize等比缩放\"><a class=\"markdownIt-Anchor\" href=\"#compose-resize等比缩放\">#</a> Compose Resize（等比缩放）</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">trans_resize_2</span> <span class=\"string\">=</span> <span class=\"string\">transforms.Resize(512)</span></span><br><span class=\"line\"><span class=\"comment\"># 后面参数的输入 和 前面参数的输出 进行匹配</span></span><br><span class=\"line\"><span class=\"string\">trans_compose</span> <span class=\"string\">=</span> <span class=\"string\">transforms.Compose([trans_resize_2,trans_totenser])</span></span><br><span class=\"line\"><span class=\"comment\"># 需要输入 PIL img</span></span><br><span class=\"line\"><span class=\"string\">img_resize_2</span> <span class=\"string\">=</span> <span class=\"string\">trans_compose(img)</span></span><br><span class=\"line\"><span class=\"string\">writer.add_image(&quot;Resize&quot;,img_resize_2,1)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"randomcrop\"><a class=\"markdownIt-Anchor\" href=\"#randomcrop\">#</a> RandomCrop</h2>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"><span class=\"string\">trans_random</span> <span class=\"string\">=</span> <span class=\"string\">transforms.RandomCrop(333)</span></span><br><span class=\"line\"><span class=\"comment\"># 进行随机裁剪，然后转化为tenser类型</span></span><br><span class=\"line\"><span class=\"string\">trans_compose</span> <span class=\"string\">=</span> <span class=\"string\">transforms.Compose([trans_random,trans_totenser])</span></span><br><span class=\"line\"><span class=\"attr\">for i in range(10):</span></span><br><span class=\"line\">    <span class=\"string\">img_crop</span> <span class=\"string\">=</span> <span class=\"string\">trans_compose(img)</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_image(&quot;RandomCrop&quot;,img_crop,i)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"dataset和transforms的联合使用\"><a class=\"markdownIt-Anchor\" href=\"#dataset和transforms的联合使用\">#</a> dataset 和 transforms 的联合使用</h1>\n<ul>\n<li>下载数据集</li>\n</ul>\n<p>视频中相同的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRvcmNoLm9yZy92aXNpb24vMC45Lw==\"> pytorch 链接</span></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">train_set</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&quot;./data&quot;,train=True,download=True)</span></span><br><span class=\"line\"><span class=\"string\">test_set</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&quot;./data&quot;,train=False,download=True)</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<details class=\"success\"><summary>数据集</summary><div>\n<p>;;;<br>\n<span class=\"label success\">success</span></p>\n<div class=\"links\"><div class=\"item\" title=\"CIFAR10.zip\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU96LWphQlNEOHZrMVBmVHVjcXcwN3c/cHdkPTgyaWk=\" data-background-image=\"https://img.88icon.com/download/jpg/201912/20212877d98b95ae7730decb11762bac.jpg!bg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU96LWphQlNEOHZrMVBmVHVjcXcwN3c/cHdkPTgyaWk=\">CIFAR10.zip</span>\n          <p class=\"desc\">密码82ii</p>\n          </div></div></div>\n<p>;;;</p>\n</div></details>\n<ul>\n<li>联合使用</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">test_tb</span> <span class=\"string\">import</span> <span class=\"string\">writer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">dataset_transform</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.transforms.Compose([</span></span><br><span class=\"line\">    <span class=\"string\">torchvision.transforms.ToTensor()</span></span><br><span class=\"line\"><span class=\"string\">])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">train_set</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&quot;/data&quot;,train=True,transform=dataset_transform,download=True)</span></span><br><span class=\"line\"><span class=\"string\">test_set</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(root=&quot;/data&quot;,train=False,transform=dataset_transform,download=True)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(test_set)</span></span><br><span class=\"line\"><span class=\"comment\"># print(test_set.classes)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># img,target = test_set[0]</span></span><br><span class=\"line\"><span class=\"comment\"># print(img)</span></span><br><span class=\"line\"><span class=\"comment\"># print(target)</span></span><br><span class=\"line\"><span class=\"comment\"># print(test_set.classes[target])</span></span><br><span class=\"line\"><span class=\"comment\"># img.show()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(test_set[0])</span></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;p10&quot;)</span></span><br><span class=\"line\"><span class=\"attr\">for i in range(10):</span></span><br><span class=\"line\">    <span class=\"string\">img,target</span> <span class=\"string\">=</span> <span class=\"string\">train_set[i]</span></span><br><span class=\"line\">    <span class=\"string\">writer.add_image(&quot;test_set&quot;,img,i)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"dataloader的使用\"><a class=\"markdownIt-Anchor\" href=\"#dataloader的使用\">#</a> DataLoader 的使用</h1>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```python</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torchvision.datasets</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.data</span> <span class=\"string\">import</span> <span class=\"string\">DataLoader</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">torch.utils.tensorboard</span> <span class=\"string\">import</span> <span class=\"string\">SummaryWriter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">dataset_transform</span> <span class=\"string\">import</span> <span class=\"string\">test_set,</span> <span class=\"string\">writer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">test_data</span> <span class=\"string\">=</span> <span class=\"string\">torchvision.datasets.CIFAR10(&quot;./data&quot;,</span> <span class=\"string\">train=False,transform=torchvision.transforms.ToTensor())</span></span><br><span class=\"line\"><span class=\"comment\"># 当batch_size不足64，drop_last=True将会舍去剩下的图片</span></span><br><span class=\"line\"><span class=\"comment\"># shuffle = False时两轮数据是相同的</span></span><br><span class=\"line\"><span class=\"string\">test_loader</span> <span class=\"string\">=</span> <span class=\"string\">DataLoader(dataset=test_set,</span> <span class=\"string\">batch_size=64,</span> <span class=\"string\">shuffle=False,</span> <span class=\"string\">num_workers=0,</span> <span class=\"string\">drop_last=True)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试数据集中的第一张图片及target</span></span><br><span class=\"line\"><span class=\"string\">img,target</span> <span class=\"string\">=</span> <span class=\"string\">test_data[0]</span></span><br><span class=\"line\"><span class=\"string\">print(img.shape)</span></span><br><span class=\"line\"><span class=\"string\">print(target)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer</span> <span class=\"string\">=</span> <span class=\"string\">SummaryWriter(&quot;dataloader&quot;)</span></span><br><span class=\"line\"><span class=\"string\">step</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 两轮</span></span><br><span class=\"line\"><span class=\"attr\">for epoch in range(2):</span></span><br><span class=\"line\">    <span class=\"attr\">for data in test_loader:</span></span><br><span class=\"line\">        <span class=\"string\">imgs,targets</span> <span class=\"string\">=</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"comment\"># print(imgs.shape)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(targets)</span></span><br><span class=\"line\">        <span class=\"string\">writer.add_images(&quot;test_data_epoch_false&quot;,imgs,step)</span></span><br><span class=\"line\">        <span class=\"string\">step</span> <span class=\"string\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">writer.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "笔记",
                "pytorch基础"
            ]
        },
        {
            "id": "http://example.com/2025/03/23/computer-science/crawler/1/",
            "url": "http://example.com/2025/03/23/computer-science/crawler/1/",
            "title": "爬取今日菜价：2025.3.23云南蔬菜市场综合菜价",
            "date_published": "2025-03-22T16:00:00.000Z",
            "content_html": "<h1 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\">#</a> 背景</h1>\n<p>在实践哔哩哔哩 Python 研究社的爬虫教程时，Bs4 解析的教学需要用到北京新天地数据，但因为网站改变，数据不能适用于课程，所以找了另外一个网址来进行练习</p>\n<h1 id=\"课程信息与网站信息\"><a class=\"markdownIt-Anchor\" href=\"#课程信息与网站信息\">#</a> 课程信息与网站信息</h1>\n<div class=\"links\"><div class=\"item\" title=\"Python研究社\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXVONHkxVzdEdT9zcG1faWRfZnJvbT0zMzMuNzg4LnBsYXllci5zd2l0Y2gmdmRfc291cmNlPTIxYTg4NDRlZGE0MTE4N2M2ZTIxYzhmYTdjNTNiZThlJnA9MzA=\" data-background-image=\"https://images.sj33.cn/uploads/202005/7-200525101140K8.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXVONHkxVzdEdT9zcG1faWRfZnJvbT0zMzMuNzg4LnBsYXllci5zd2l0Y2gmdmRfc291cmNlPTIxYTg4NDRlZGE0MTE4N2M2ZTIxYzhmYTdjNTNiZThlJnA9MzA=\">Bs4解析入门</span>\n          <p class=\"desc\">爬虫教程</p>\n          </div></div></div>\n<div class=\"links\"><div class=\"item\" title=\"今日菜价\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cDovL3pob25nZGFwZW5nLmNvbS9zaHVjYWlqaWFnZS8xODgyLmh0bWw=\" data-background-image=\"https://bpic.588ku.com/back_origin_min_pic/19/11/12/29a1c1f87580d2b061e113bf231e2973.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL3pob25nZGFwZW5nLmNvbS9zaHVjYWlqaWFnZS8xODgyLmh0bWw=\">今日菜价</span>\n          <p class=\"desc\">蔬菜批发市场价格行情</p>\n          </div></div></div>\n<h1 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\"><span class=\"comment\"># pip install bs4 -i 清华</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">requests</span></span><br><span class=\"line\"><span class=\"string\">from</span> <span class=\"string\">bs4</span> <span class=\"string\">import</span> <span class=\"string\">BeautifulSoup</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">csv</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">url</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://zhongdapeng.com/shucaijiage/1882.html&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">main</span> <span class=\"string\">=</span> <span class=\"string\">requests.get(url,</span> <span class=\"string\">timeout=10)</span></span><br><span class=\"line\"><span class=\"string\">main.encoding</span> <span class=\"string\">=</span> <span class=\"string\">&#x27;utf-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">main_page</span> <span class=\"string\">=</span> <span class=\"string\">main.text</span></span><br><span class=\"line\"><span class=\"comment\"># print(main_page)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">f</span> <span class=\"string\">=</span> <span class=\"string\">open(r&quot;F:\\doc\\python\\1\\python</span> <span class=\"string\">go</span> <span class=\"string\">lraening\\爬虫\\菜价.csv&quot;,</span> <span class=\"string\">mode=&quot;w&quot;,</span> <span class=\"string\">encoding=&quot;utf-8&quot;)</span></span><br><span class=\"line\"><span class=\"string\">csvwriter</span> <span class=\"string\">=</span> <span class=\"string\">csv.writer(f)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析数据</span></span><br><span class=\"line\"><span class=\"comment\"># 把页面源代码交给B 进行处理，生成bs对象</span></span><br><span class=\"line\"><span class=\"string\">page</span> <span class=\"string\">=</span> <span class=\"string\">BeautifulSoup(main_page,</span> <span class=\"string\">&quot;html.parser&quot;</span><span class=\"string\">)#</span> <span class=\"string\">指定html解析器</span></span><br><span class=\"line\"><span class=\"comment\"># print(page)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从bs对象中查找数据</span></span><br><span class=\"line\"><span class=\"comment\"># find（标签，属性=值）</span></span><br><span class=\"line\"><span class=\"comment\"># find_all（标签，属性=值）</span></span><br><span class=\"line\"><span class=\"string\">table</span> <span class=\"string\">=</span> <span class=\"string\">page.find(&quot;table&quot;,</span> <span class=\"string\">attrs=&#123;&quot;width&quot;:&quot;530&quot;&#125;)#</span> <span class=\"string\">class是python的关键字</span></span><br><span class=\"line\"><span class=\"comment\"># print(table)</span></span><br><span class=\"line\"><span class=\"string\">trs</span> <span class=\"string\">=</span> <span class=\"string\">table.find_all(&quot;tr&quot;)[1:]</span></span><br><span class=\"line\"><span class=\"attr\">for tr in trs:</span></span><br><span class=\"line\">    <span class=\"string\">ps</span> <span class=\"string\">=</span> <span class=\"string\">tr.find_all(&quot;p&quot;)</span></span><br><span class=\"line\">    <span class=\"string\">num</span> <span class=\"string\">=</span> <span class=\"string\">ps[0].text</span></span><br><span class=\"line\">    <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">ps[1].text</span>     <span class=\"comment\"># .text拿到被标签标记的内容</span></span><br><span class=\"line\">    <span class=\"string\">price</span> <span class=\"string\">=</span> <span class=\"string\">ps[2].text</span></span><br><span class=\"line\">    <span class=\"comment\"># print(num,name,price)</span></span><br><span class=\"line\">    <span class=\"string\">csvwriter.writerow([num,</span> <span class=\"string\">name,</span> <span class=\"string\">price])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">print(&quot;over&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">f.close()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "http://example.com/2025/03/23/computer-science/python/pytorch0/",
            "url": "http://example.com/2025/03/23/computer-science/python/pytorch0/",
            "title": "笔记：PyTorch(0)",
            "date_published": "2025-03-22T16:00:00.000Z",
            "content_html": "<h1 id=\"pytorch学习准备\"><a class=\"markdownIt-Anchor\" href=\"#pytorch学习准备\">#</a> PyTorch 学习准备</h1>\n<p>本章包含了学习 pytorch 需要安装的软件及其配置</p>\n<h1 id=\"课程信息\"><a class=\"markdownIt-Anchor\" href=\"#课程信息\">#</a> 课程信息</h1>\n<ul>\n<li>课程</li>\n</ul>\n<div class=\"links\"><div class=\"item\" title=\"我是土堆\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhFNDExdDdSTi8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTIxYTg4NDRlZGE0MTE4N2M2ZTIxYzhmYTdjNTNiZThl\" data-background-image=\"https://www.bilibili.com/favicon.ico\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhFNDExdDdSTi8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTIxYTg4NDRlZGE0MTE4N2M2ZTIxYzhmYTdjNTNiZThl\">PyTorch深度学习快速入门教程</span>\n          <p class=\"desc\">PyTorch深度学习</p>\n          </div></div></div>\n<ul>\n<li>课程资料</li>\n</ul>\n<div class=\"links\"><div class=\"item\" title=\"我是土堆\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUN2VElqdVhUNHRNb25HMFdsdEYtdlE/cHdkPWpubnA=\" data-background-image=\"http://www.baidu.com/img/baidu_logo.gif\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUN2VElqdVhUNHRNb25HMFdsdEYtdlE/cHdkPWpubnA=\">课程资源</span>\n          <p class=\"desc\">PyTorch深度学习快速入门教程的课程资源</p>\n          </div></div></div>\n<h1 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h1>\n<h2 id=\"pytorch环境的配置及安装\"><a class=\"markdownIt-Anchor\" href=\"#pytorch环境的配置及安装\">#</a> PyTorch 环境的配置及安装</h2>\n<ul>\n<li>用 conda 指令建造一个 python（3.6）的 conda 环境</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Anaconda</span> <span class=\"string\">Prompt</span></span><br><span class=\"line\"><span class=\"string\">conda</span> <span class=\"string\">create</span> <span class=\"string\">-n</span> <span class=\"string\">pytorch</span> <span class=\"string\">python=3.6</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<p>pytorch 是 conda 环境的名字</p>\n<ul>\n<li>激活创建的 conda 环境</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Anaconda</span> <span class=\"string\">Prompt</span></span><br><span class=\"line\"><span class=\"string\">conda</span> <span class=\"string\">activate</span> <span class=\"string\">pytorch</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 GPUA 的版本</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```cmd</span></span><br><span class=\"line\"><span class=\"string\">nvidia-smi</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装 pytorch</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Anaconda</span> <span class=\"string\">Prompt</span></span><br><span class=\"line\"><span class=\"string\">pip3</span> <span class=\"string\">install</span> <span class=\"string\">torch</span> <span class=\"string\">torchvision</span> <span class=\"string\">torchaudio</span> <span class=\"string\">-i</span> <span class=\"string\">https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<p>博主推荐 windows 安装 pytorch 使用 conda</p>\n<ul>\n<li>判断是否安装成功</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Anaconda</span> <span class=\"string\">Prompt</span></span><br><span class=\"line\"><span class=\"string\">pip</span> <span class=\"string\">list</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<p>如果存在 torch 等即安装成功</p>\n<ul>\n<li>检查 PyTorch 是否支持 CUDA</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Anaconda</span> <span class=\"string\">Prompt</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">print(torch.cuda.is_available())</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"python编辑器的选择安装及配置\"><a class=\"markdownIt-Anchor\" href=\"#python编辑器的选择安装及配置\">#</a> python 编辑器的选择，安装及配置</h2>\n<h3 id=\"pycharm\"><a class=\"markdownIt-Anchor\" href=\"#pycharm\">#</a> PyCharm</h3>\n<ul>\n<li>下载地址</li>\n</ul>\n<div class=\"links\"><div class=\"item\" title=\"Copyright © 2025 JetBrains s.r.o. JetBrains and the JetBrains logo are trademarks of JetBrains s.r.o.\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9weWNoYXJtLw==\" data-background-image=\"https://resources.jetbrains.com.cn/storage/products/company/brand/logos/jetbrains.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9weWNoYXJtLw==\">PyCharm</span>\n          <p class=\"desc\">PyCharm下载地址</p>\n          </div></div></div>\n<p>高版本创建项目之后选择系统解释器，按照 up 主的地址找到 python.exe</p>\n<h3 id=\"jupyter\"><a class=\"markdownIt-Anchor\" href=\"#jupyter\">#</a> Jupyter</h3>\n<ul>\n<li>安装 nb_conda_kernels<br>\nnb_conda 包要求的 Python 版本范围是：<br>\nPython 2.7<br>\nPython 3.5<br>\nPython 3.6<br>\nPython 3.7<br>\nPython 3.8<br>\n 超过以上范围的可以使用 nb_conda_kernels, 提供了 nb_conda 类似的功能</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Anaconda</span> <span class=\"string\">Prompt</span></span><br><span class=\"line\"><span class=\"string\">activate</span> <span class=\"string\">环境名称</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">conda</span> <span class=\"string\">install</span> <span class=\"string\">nb_conda</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">conda</span> <span class=\"string\">install</span> <span class=\"string\">ipykernel</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">conda</span> <span class=\"string\">install</span> <span class=\"string\">-n</span> <span class=\"string\">环境名称</span> <span class=\"string\">ipykernel</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"string\">python</span> <span class=\"string\">-m</span> <span class=\"string\">ipykernel</span> <span class=\"string\">install</span> <span class=\"string\">--user</span> <span class=\"string\">--name</span> <span class=\"string\">环境名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试是否安装好 jupyter<br>\n 进入 home</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Anaconda</span> <span class=\"string\">Prompt</span></span><br><span class=\"line\"><span class=\"string\">jupyter</span> <span class=\"string\">notebook</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<p>点击 new，选择 pytorch，输入以下内容并运行（Shift+Enter），返回 true 即是成功</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```Anaconda</span> <span class=\"string\">Prompt</span></span><br><span class=\"line\"><span class=\"string\">import</span> <span class=\"string\">torch</span></span><br><span class=\"line\"><span class=\"string\">torch.cuda.is_available()</span></span><br><span class=\"line\"><span class=\"string\">```</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"python学习中的需要的两个函数\"><a class=\"markdownIt-Anchor\" href=\"#python学习中的需要的两个函数\">#</a> Python 学习中的需要的两个函数</h2>\n<ul>\n<li>dir () 打开</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">dir(pytorch)</span></span><br><span class=\"line\"><span class=\"string\">dir(pytorch.cuda)</span></span><br><span class=\"line\"><span class=\"string\">dir(pytorch.cuda.is_available())</span></span><br></pre></td></tr></table></figure>\n<p>知道列出的输出是具体的函数（<strong>XXX</strong>）即可使用 help 来查看使用方式</p>\n<ul>\n<li>help () 说明书</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">help(pytorch.cuda.is_available)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用对比\"><a class=\"markdownIt-Anchor\" href=\"#使用对比\">#</a> 使用对比</h2>\n<ul>\n<li>python 文件<br>\n python 文件运行的话，块是所有代码，每次运行都是从头开始运行<br>\n优点：通用，传播方便，适用于大型项目<br>\n缺点：需要从头运行</li>\n<li>pycharm 控制台<br>\n python 控制台以每一行（任意行）为一块（Shift+Enter）<br>\n优点：可以显示每个变量属性<br>\n缺点：不利于代码阅读及修改</li>\n<li>jupyter<br>\nJupyter 以任意行为块运行的<br>\n优点：利于代码阅读及修改<br>\n缺点：环境据要配置</li>\n</ul>\n",
            "tags": []
        }
    ]
}